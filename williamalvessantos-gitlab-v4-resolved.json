{
  "swagger": "2.0",
  "info": {
    "description": "The platform for modern developers\nGitLab unifies issues, code review, CI and CD into a single UI",
    "version": "v4",
    "title": "Gitlab",
    "x-origin": [
      {
        "url": "https://axil.gitlab.io/swaggerapi/static/swagger.json",
        "format": "swagger",
        "version": "2.0"
      }
    ]
  },
  "host": "gitlab.com",
  "basePath": "/api",
  "tags": [
    {
      "name": "groups",
      "description": "Operations about groups"
    },
    {
      "name": "projects",
      "description": "Operations about projects"
    },
    {
      "name": "internal",
      "description": "Operations about internals"
    },
    {
      "name": "issues",
      "description": "Operations about issues"
    },
    {
      "name": "keys",
      "description": "Operations about keys"
    },
    {
      "name": "ci",
      "description": "Operations about cis"
    },
    {
      "name": "namespaces",
      "description": "Operations about namespaces"
    },
    {
      "name": "notification_settings",
      "description": "Operations about notification_settings"
    },
    {
      "name": "runners",
      "description": "Operations about runners"
    },
    {
      "name": "snippets",
      "description": "Operations about snippets"
    },
    {
      "name": "hooks",
      "description": "Operations about hooks"
    },
    {
      "name": "todos",
      "description": "Operations about todos"
    },
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "user",
      "description": "Operations about users"
    },
    {
      "name": "deploy_keys",
      "description": "Operations about deploy_keys"
    },
    {
      "name": "session",
      "description": "Operations about sessions"
    },
    {
      "name": "application",
      "description": "Operations about applications"
    },
    {
      "name": "sidekiq",
      "description": "Operations about sidekiqs"
    },
    {
      "name": "licenses",
      "description": "Operations about licenses"
    },
    {
      "name": "templates",
      "description": "Operations about templates"
    },
    {
      "name": "gitignores",
      "description": "Operations about gitignores"
    },
    {
      "name": "gitlab_ci_ymls",
      "description": "Operations about gitlab_ci_ymls"
    },
    {
      "name": "dockerfiles",
      "description": "Operations about dockerfiles"
    },
    {
      "name": "version",
      "description": "Operations about versions"
    }
  ],
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "security": [
    {
      "private_token_header": []
    },
    {
      "private_token_query": []
    }
  ],
  "paths": {
    "/v3/groups/{id}/access_requests": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Gets a list of access requests for a group.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3GroupsIdAccessRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of access requests for a group.",
            "schema": {
              "$ref": "#/definitions/AccessRequester"
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Requests access for the authenticated user to a group.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3GroupsIdAccessRequests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Requests access for the authenticated user to a group.",
            "schema": {
              "$ref": "#/definitions/AccessRequester"
            }
          }
        }
      }
    },
    "/v3/groups/{id}/access_requests/{user_id}/approve": {
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Approves an access request for the given user.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3GroupsIdAccessRequestsUserIdApprove",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the access requester",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "access_level",
            "in": "formData",
            "description": "A valid access level (defaults: `30`, developer access level)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Approves an access request for the given user.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      }
    },
    "/v3/groups/{id}/access_requests/{user_id}": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Denies an access request for the given user.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3GroupsIdAccessRequestsUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the access requester",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        }
      }
    },
    "/v3/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get a groups list",
        "description": "Get a groups list",
        "operationId": "getV3Groups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statistics",
            "in": "query",
            "description": "Include project statistics",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip_groups",
            "in": "formData",
            "description": "Array of group ids to exclude from list",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "all_available",
            "in": "query",
            "description": "Show all group that you have access to",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search for a specific group",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order by name or path",
            "required": false,
            "type": "string",
            "default": "name",
            "enum": [
              "name",
              "path"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by asc (ascending) or desc (descending)",
            "required": false,
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a groups list",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create a group. Available only for users who can create groups.",
        "description": "Create a group. Available only for users who can create groups.",
        "operationId": "postV3Groups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the group",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "formData",
            "description": "The path of the group",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the group",
            "required": false,
            "type": "string"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "The visibility level of the group",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lfs_enabled",
            "in": "formData",
            "description": "Enable/disable LFS for the projects in this group",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request_access_enabled",
            "in": "formData",
            "description": "Allow users to request member access",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a group. Available only for users who can create groups.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        }
      }
    },
    "/v3/groups/owned": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get list of owned groups for authenticated user",
        "description": "Get list of owned groups for authenticated user",
        "operationId": "getV3GroupsOwned",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "Include project statistics",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of owned groups for authenticated user",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        }
      }
    },
    "/v3/groups/{id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get a single group, with containing projects.",
        "description": "Get a single group, with containing projects.",
        "operationId": "getV3GroupsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single group, with containing projects.",
            "schema": {
              "$ref": "#/definitions/GroupDetail"
            }
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Update a group. Available only for users who can administrate groups.",
        "description": "Update a group. Available only for users who can administrate groups.",
        "operationId": "putV3GroupsId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a group",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the group",
            "required": false,
            "type": "string"
          },
          {
            "name": "path",
            "in": "formData",
            "description": "The path of the group",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the group",
            "required": false,
            "type": "string"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "The visibility level of the group",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lfs_enabled",
            "in": "formData",
            "description": "Enable/disable LFS for the projects in this group",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request_access_enabled",
            "in": "formData",
            "description": "Allow users to request member access",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update a group. Available only for users who can administrate groups.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Remove a group.",
        "description": "Remove a group.",
        "operationId": "deleteV3GroupsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a group."
          }
        }
      }
    },
    "/v3/groups/{id}/projects": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get a list of projects in this group.",
        "description": "Get a list of projects in this group.",
        "operationId": "getV3GroupsIdProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a group",
            "required": true,
            "type": "string"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "required": false,
            "type": "string",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of authorized projects matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only the ID, URL, name, and path of each project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of projects in this group.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/groups/{id}/projects/{project_id}": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Transfer a project to the group namespace. Available only for admin.",
        "description": "Transfer a project to the group namespace. Available only for admin.",
        "operationId": "postV3GroupsIdProjectsProjectId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a group",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "The ID or path of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer a project to the group namespace. Available only for admin.",
            "schema": {
              "$ref": "#/definitions/GroupDetail"
            }
          }
        }
      }
    },
    "/v3/groups/{id}/issues": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get a list of group issues",
        "description": "Get a list of group issues",
        "operationId": "getV3GroupsIdIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a group",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return opened, closed, or all issues",
            "required": false,
            "type": "string",
            "default": "opened",
            "enum": [
              "opened",
              "closed",
              "all"
            ]
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "Return issues for a specific milestone",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return issues sorted in `asc` or `desc` order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of group issues",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      }
    },
    "/v3/groups/{id}/members": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Gets a list of group or project members viewable by the authenticated user.",
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "getV3GroupsIdMembers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A query string to search for members",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Adds a member to a group or project.",
        "description": "Adds a member to a group or project.",
        "operationId": "postV3GroupsIdMembers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "formData",
            "description": "The user ID of the new member",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "access_level",
            "in": "formData",
            "description": "A valid access level (defaults: `30`, developer access level)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "expires_at",
            "in": "formData",
            "description": "Date string in the format YEAR-MONTH-DAY",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "201": {
            "description": "Adds a member to a group or project.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      }
    },
    "/v3/groups/{id}/members/{user_id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Gets a member of a group or project.",
        "description": "Gets a member of a group or project.",
        "operationId": "getV3GroupsIdMembersUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the member",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a member of a group or project.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Updates a member of a group or project.",
        "description": "Updates a member of a group or project.",
        "operationId": "putV3GroupsIdMembersUserId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the new member",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "access_level",
            "in": "formData",
            "description": "A valid access level",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "expires_at",
            "in": "formData",
            "description": "Date string in the format YEAR-MONTH-DAY",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a member of a group or project.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Removes a user from a group or project.",
        "description": "Removes a user from a group or project.",
        "operationId": "deleteV3GroupsIdMembersUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the member",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Removes a user from a group or project."
          }
        }
      }
    },
    "/v3/groups/{id}/notification_settings": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get group level notification level settings, defaults to Global",
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3GroupsIdNotificationSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get group level notification level settings, defaults to Global",
            "schema": {
              "$ref": "#/definitions/NotificationSetting"
            }
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Update group level notification level settings, defaults to Global",
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3GroupsIdNotificationSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "in": "formData",
            "description": "The group notification level",
            "required": false,
            "type": "string"
          },
          {
            "name": "new_note",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "new_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reopen_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "close_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reassign_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "new_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reopen_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "close_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reassign_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "failed_pipeline",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "success_pipeline",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update group level notification level settings, defaults to Global",
            "schema": {
              "$ref": "#/definitions/NotificationSetting"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/access_requests": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets a list of access requests for a project.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdAccessRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of access requests for a project.",
            "schema": {
              "$ref": "#/definitions/AccessRequester"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Requests access for the authenticated user to a project.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdAccessRequests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Requests access for the authenticated user to a project.",
            "schema": {
              "$ref": "#/definitions/AccessRequester"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/access_requests/{user_id}/approve": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Approves an access request for the given user.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3ProjectsIdAccessRequestsUserIdApprove",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the access requester",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "access_level",
            "in": "formData",
            "description": "A valid access level (defaults: `30`, developer access level)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Approves an access request for the given user.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/access_requests/{user_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Denies an access request for the given user.",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3ProjectsIdAccessRequestsUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the access requester",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/award_emoji": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +awardable+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdAwardEmoji",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of an Issue, Merge Request or Snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Award a new Emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdIssuesIssueIdAwardEmoji",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of a award_emoji (without colons)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of the award",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +awardables+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of an award emoji",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +awardable+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Award a new Emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of a award_emoji (without colons)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of the award",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +awardables+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of an award emoji",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +awardable+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of an Issue, Merge Request or Snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Award a new Emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of a award_emoji (without colons)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of the award",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +awardables+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of an award emoji",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +awardable+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Award a new Emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of a award_emoji (without colons)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of the award",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +awardables+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of an award emoji",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/award_emoji": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +awardable+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdAwardEmoji",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "description": "The ID of an Issue, Merge Request or Snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Award a new Emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdSnippetsSnippetIdAwardEmoji",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of a award_emoji (without colons)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of the award",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +awardables+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of an award emoji",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +awardable+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Award a new Emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of a award_emoji (without colons)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of the award",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +awardables+ award emoji",
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "award_id",
            "in": "path",
            "description": "The ID of an award emoji",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "schema": {
              "$ref": "#/definitions/AwardEmoji"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/boards": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all project boards",
        "description": "This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoards",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all project boards",
            "schema": {
              "$ref": "#/definitions/Board"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/branches": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a project repository branches",
        "description": "Get a project repository branches",
        "operationId": "getV3ProjectsIdRepositoryBranches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository branches",
            "schema": {
              "$ref": "#/definitions/RepoBranch"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create branch",
        "description": "Create branch",
        "operationId": "postV3ProjectsIdRepositoryBranches",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch_name",
            "in": "formData",
            "description": "The name of the branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "Create branch from commit sha or existing branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create branch",
            "schema": {
              "$ref": "#/definitions/RepoBranch"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single branch",
        "description": "Get a single branch",
        "operationId": "getV3ProjectsIdRepositoryBranchesBranch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single branch",
            "schema": {
              "$ref": "#/definitions/RepoBranch"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a branch",
        "description": "Delete a branch",
        "operationId": "deleteV3ProjectsIdRepositoryBranchesBranch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a branch"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}/protect": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Protect a single branch",
        "description": "Protect a single branch",
        "operationId": "putV3ProjectsIdRepositoryBranchesBranchProtect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "developers_can_push",
            "in": "formData",
            "description": "Flag if developers can push to that branch",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "developers_can_merge",
            "in": "formData",
            "description": "Flag if developers can merge to that branch",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Protect a single branch",
            "schema": {
              "$ref": "#/definitions/RepoBranch"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}/unprotect": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Unprotect a single branch",
        "description": "Unprotect a single branch",
        "operationId": "putV3ProjectsIdRepositoryBranchesBranchUnprotect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "path",
            "description": "The name of the branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unprotect a single branch",
            "schema": {
              "$ref": "#/definitions/RepoBranch"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/merged_branches": {
      "delete": {
        "tags": [
          "projects"
        ],
        "operationId": "deleteV3ProjectsIdRepositoryMergedBranches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted MergedBranch"
          }
        }
      }
    },
    "/v3/projects/{id}/builds": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a project builds",
        "description": "Get a project builds",
        "operationId": "getV3ProjectsIdBuilds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of builds to show",
            "required": false,
            "type": "string",
            "enum": [
              "pending",
              "running",
              "failed",
              "success",
              "canceled"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project builds",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/builds": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get builds for a specific commit of a project",
        "description": "Get builds for a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaBuilds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The SHA id of a commit",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of builds to show",
            "required": false,
            "type": "string",
            "enum": [
              "pending",
              "running",
              "failed",
              "success",
              "canceled"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get builds for a specific commit of a project",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific build of a project",
        "description": "Get a specific build of a project",
        "operationId": "getV3ProjectsIdBuildsBuildId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific build of a project",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/artifacts": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Download the artifacts file from build",
        "description": "This feature was introduced in GitLab 8.5",
        "operationId": "getV3ProjectsIdBuildsBuildIdArtifacts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Download the artifacts file from build"
          }
        }
      }
    },
    "/v3/projects/{id}/builds/artifacts/{ref_name}/download": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Download the artifacts file from build",
        "description": "This feature was introduced in GitLab 8.10",
        "operationId": "getV3ProjectsIdBuildsArtifactsRefNameDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref_name",
            "in": "path",
            "description": "The ref from repository",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "query",
            "description": "The name for the build",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Download the artifacts file from build"
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/trace": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a trace of a specific build of a project",
        "description": "Get a trace of a specific build of a project",
        "operationId": "getV3ProjectsIdBuildsBuildIdTrace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a trace of a specific build of a project"
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/cancel": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Cancel a specific build of a project",
        "description": "Cancel a specific build of a project",
        "operationId": "postV3ProjectsIdBuildsBuildIdCancel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel a specific build of a project",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/retry": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Retry a specific build of a project",
        "description": "Retry a specific build of a project",
        "operationId": "postV3ProjectsIdBuildsBuildIdRetry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Retry a specific build of a project",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/erase": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Erase build (remove artifacts and build trace)",
        "description": "Erase build (remove artifacts and build trace)",
        "operationId": "postV3ProjectsIdBuildsBuildIdErase",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Erase build (remove artifacts and build trace)",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/artifacts/keep": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Keep the artifacts to prevent them from being deleted",
        "description": "Keep the artifacts to prevent them from being deleted",
        "operationId": "postV3ProjectsIdBuildsBuildIdArtifactsKeep",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Keep the artifacts to prevent them from being deleted",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/builds/{build_id}/play": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Trigger a manual build",
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdBuildsBuildIdPlay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "in": "path",
            "description": "The ID of a Build",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a manual build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a project repository commits",
        "description": "Get a project repository commits",
        "operationId": "getV3ProjectsIdRepositoryCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref_name",
            "in": "query",
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only commits after or in this date will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Only commits before or in this date will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page for pagination",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The file path",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository commits",
            "schema": {
              "$ref": "#/definitions/RepoCommit"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Commit multiple file changes as one commit",
        "description": "This feature was introduced in GitLab 8.13",
        "operationId": "postV3ProjectsIdRepositoryCommits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch_name",
            "in": "formData",
            "description": "The name of branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "commit_message",
            "in": "formData",
            "description": "Commit message",
            "required": true,
            "type": "string"
          },
          {
            "name": "actions",
            "in": "formData",
            "description": "Actions to perform in commit",
            "required": true,
            "type": "array",
            "items": {
              "x-type": "object"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "author_email",
            "in": "formData",
            "description": "Author email for commit",
            "required": false,
            "type": "string"
          },
          {
            "name": "author_name",
            "in": "formData",
            "description": "Author name for commit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Commit multiple file changes as one commit",
            "schema": {
              "$ref": "#/definitions/RepoCommitDetail"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific commit of a project",
        "description": "Get a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsSha",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "A commit sha, or the name of a branch or tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific commit of a project",
            "schema": {
              "$ref": "#/definitions/RepoCommitDetail"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/diff": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the diff for a specific commit of a project",
        "description": "Get the diff for a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaDiff",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "A commit sha, or the name of a branch or tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the diff for a specific commit of a project"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/comments": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a commit's comments",
        "description": "Get a commit's comments",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "A commit sha, or the name of a branch or tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a commit's comments",
            "schema": {
              "$ref": "#/definitions/CommitNote"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Post comment to commit",
        "description": "Post comment to commit",
        "operationId": "postV3ProjectsIdRepositoryCommitsShaComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The commit's SHA",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "formData",
            "description": "The text of the comment",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "formData",
            "description": "The file path",
            "required": false,
            "type": "string"
          },
          {
            "name": "line",
            "in": "formData",
            "description": "The line number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "line_type",
            "in": "formData",
            "description": "The type of the line",
            "required": true,
            "type": "string",
            "default": "new",
            "enum": [
              "new",
              "old"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Post comment to commit",
            "schema": {
              "$ref": "#/definitions/CommitNote"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/cherry_pick": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Cherry pick commit into a branch",
        "description": "This feature was introduced in GitLab 8.15",
        "operationId": "postV3ProjectsIdRepositoryCommitsShaCherryPick",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "A commit sha to be cherry picked",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "formData",
            "description": "The name of the branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Cherry pick commit into a branch",
            "schema": {
              "$ref": "#/definitions/RepoCommit"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/statuses": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a commit's statuses",
        "description": "Get a commit's statuses",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The commit hash",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "query",
            "description": "The ref",
            "required": false,
            "type": "string"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "The stage",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "description": "Show all statuses, default: false",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a commit's statuses",
            "schema": {
              "$ref": "#/definitions/CommitStatus"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/statuses/{sha}": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Post status to a commit",
        "description": "Post status to a commit",
        "operationId": "postV3ProjectsIdStatusesSha",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The commit hash",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "formData",
            "description": "The state of the status",
            "required": true,
            "type": "string",
            "enum": [
              "pending",
              "running",
              "success",
              "failed",
              "canceled"
            ]
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "The ref",
            "required": false,
            "type": "string"
          },
          {
            "name": "target_url",
            "in": "formData",
            "description": "The target URL to associate with this status",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "A short description of the status",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "context",
            "in": "formData",
            "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Post status to a commit",
            "schema": {
              "$ref": "#/definitions/CommitStatus"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/keys": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific project's deploy keys",
        "description": "Get a specific project's deploy keys",
        "operationId": "getV3ProjectsIdKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific project's deploy keys",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add new deploy key to currently authenticated user",
        "description": "Add new deploy key to currently authenticated user",
        "operationId": "postV3ProjectsIdKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "formData",
            "description": "The new deploy key",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The name of the deploy key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add new deploy key to currently authenticated user",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/keys/{key_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get single deploy key",
        "description": "Get single deploy key",
        "operationId": "getV3ProjectsIdKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get single deploy key",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete deploy key for a project",
        "description": "Delete deploy key for a project",
        "operationId": "deleteV3ProjectsIdKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete deploy key for a project",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/keys/{key_id}/enable": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Enable a deploy key for a project",
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdKeysKeyIdEnable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Enable a deploy key for a project",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/keys/{key_id}/disable": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Disable a deploy key for a project",
        "description": "This feature was added in GitLab 8.11",
        "operationId": "deleteV3ProjectsIdKeysKeyIdDisable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Disable a deploy key for a project",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/deploy_keys": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific project's deploy keys",
        "description": "Get a specific project's deploy keys",
        "operationId": "getV3ProjectsIdDeployKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific project's deploy keys",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add new deploy key to currently authenticated user",
        "description": "Add new deploy key to currently authenticated user",
        "operationId": "postV3ProjectsIdDeployKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "formData",
            "description": "The new deploy key",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The name of the deploy key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add new deploy key to currently authenticated user",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get single deploy key",
        "description": "Get single deploy key",
        "operationId": "getV3ProjectsIdDeployKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get single deploy key",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete deploy key for a project",
        "description": "Delete deploy key for a project",
        "operationId": "deleteV3ProjectsIdDeployKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete deploy key for a project",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}/enable": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Enable a deploy key for a project",
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdDeployKeysKeyIdEnable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Enable a deploy key for a project",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}/disable": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Disable a deploy key for a project",
        "description": "This feature was added in GitLab 8.11",
        "operationId": "deleteV3ProjectsIdDeployKeysKeyIdDisable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the deploy key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Disable a deploy key for a project",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/deployments": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all deployments of the project",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdDeployments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all deployments of the project",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/deployments/{deployment_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets a specific deployment",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdDeploymentsDeploymentId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment_id",
            "in": "path",
            "description": "The deployment ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a specific deployment",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/environments": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all environments of the project",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdEnvironments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all environments of the project",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Creates a new environment",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdEnvironments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the environment to be created",
            "required": true,
            "type": "string"
          },
          {
            "name": "external_url",
            "in": "formData",
            "description": "URL on which this deployment is viewable",
            "required": false,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Creates a new environment",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/environments/{environment_id}": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Updates an existing environment",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3ProjectsIdEnvironmentsEnvironmentId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment_id",
            "in": "path",
            "description": "The environment ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The new environment name",
            "required": false,
            "type": "string"
          },
          {
            "name": "external_url",
            "in": "formData",
            "description": "The new URL on which this deployment is viewable",
            "required": false,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updates an existing environment",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Deletes an existing environment",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3ProjectsIdEnvironmentsEnvironmentId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment_id",
            "in": "path",
            "description": "The environment ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes an existing environment",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/files": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a file from repository",
        "description": "Get a file from repository",
        "operationId": "getV3ProjectsIdRepositoryFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_path",
            "in": "query",
            "description": "The path to the file. Ex. lib/class.rb",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "query",
            "description": "The name of branch, tag, or commit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a file from repository"
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create new file in repository",
        "description": "Create new file in repository",
        "operationId": "postV3ProjectsIdRepositoryFiles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_path",
            "in": "formData",
            "description": "The path to new file. Ex. lib/class.rb",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch_name",
            "in": "formData",
            "description": "The name of branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "commit_message",
            "in": "formData",
            "description": "Commit Message",
            "required": true,
            "type": "string"
          },
          {
            "name": "author_email",
            "in": "formData",
            "description": "The email of the author",
            "required": false,
            "type": "string"
          },
          {
            "name": "author_name",
            "in": "formData",
            "description": "The name of the author",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "File content",
            "required": true,
            "type": "string"
          },
          {
            "name": "encoding",
            "in": "formData",
            "description": "File encoding",
            "required": false,
            "type": "string",
            "enum": [
              "base64"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new file in repository"
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update existing file in repository",
        "description": "Update existing file in repository",
        "operationId": "putV3ProjectsIdRepositoryFiles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_path",
            "in": "formData",
            "description": "The path to new file. Ex. lib/class.rb",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch_name",
            "in": "formData",
            "description": "The name of branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "commit_message",
            "in": "formData",
            "description": "Commit Message",
            "required": true,
            "type": "string"
          },
          {
            "name": "author_email",
            "in": "formData",
            "description": "The email of the author",
            "required": false,
            "type": "string"
          },
          {
            "name": "author_name",
            "in": "formData",
            "description": "The name of the author",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "File content",
            "required": true,
            "type": "string"
          },
          {
            "name": "encoding",
            "in": "formData",
            "description": "File encoding",
            "required": false,
            "type": "string",
            "enum": [
              "base64"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Update existing file in repository"
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete an existing file in repository",
        "description": "Delete an existing file in repository",
        "operationId": "deleteV3ProjectsIdRepositoryFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_path",
            "in": "query",
            "description": "The path to new file. Ex. lib/class.rb",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch_name",
            "in": "query",
            "description": "The name of branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "commit_message",
            "in": "query",
            "description": "Commit Message",
            "required": true,
            "type": "string"
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "The email of the author",
            "required": false,
            "type": "string"
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "The name of the author",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing file in repository"
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/time_estimate": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Set a time estimate for a project issue",
        "description": "Set a time estimate for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdTimeEstimate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "duration",
            "in": "formData",
            "description": "The duration to be parsed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Set a time estimate for a project issue"
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/reset_time_estimate": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Reset the time estimate for a project issue",
        "description": "Reset the time estimate for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdResetTimeEstimate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project issue"
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/add_spent_time": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add spent time for a project issue",
        "description": "Add spent time for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdAddSpentTime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "duration",
            "in": "formData",
            "description": "The duration to be parsed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add spent time for a project issue"
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/reset_spent_time": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Reset spent time for a project issue",
        "description": "Reset spent time for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdResetSpentTime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Reset spent time for a project issue"
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/time_stats": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Show time stats for a project issue",
        "description": "Show time stats for a project issue",
        "operationId": "getV3ProjectsIdIssuesIssueIdTimeStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Show time stats for a project issue"
          }
        }
      }
    },
    "/v3/projects/{id}/issues": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project issues",
        "description": "Get a list of project issues",
        "operationId": "getV3ProjectsIdIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return opened, closed, or all issues",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "opened",
              "closed",
              "all"
            ]
          },
          {
            "name": "iid",
            "in": "query",
            "description": "Return the issue having the given `iid`",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "Return issues for a specific milestone",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return issues sorted in `asc` or `desc` order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project issues",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project issue",
        "description": "Create a new project issue",
        "operationId": "postV3ProjectsIdIssues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of an issue",
            "required": true,
            "type": "string"
          },
          {
            "name": "created_at",
            "in": "formData",
            "description": "Date time when the issue was created. Available only for admins and project owners.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "merge_request_for_resolving_discussions",
            "in": "formData",
            "description": "The IID of a merge request for which to resolve discussions",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of an issue",
            "required": false,
            "type": "string"
          },
          {
            "name": "assignee_id",
            "in": "formData",
            "description": "The ID of a user to assign issue",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "milestone_id",
            "in": "formData",
            "description": "The ID of a milestone to assign issue",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels",
            "in": "formData",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "due_date",
            "in": "formData",
            "description": "Date time string in the format YEAR-MONTH-DAY",
            "required": false,
            "type": "string"
          },
          {
            "name": "confidential",
            "in": "formData",
            "description": "Boolean parameter if the issue should be confidential",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new project issue",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single project issue",
        "description": "Get a single project issue",
        "operationId": "getV3ProjectsIdIssuesIssueId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project issue",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing issue",
        "description": "Update an existing issue",
        "operationId": "putV3ProjectsIdIssuesIssueId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of an issue",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_at",
            "in": "formData",
            "description": "Date time when the issue was updated. Available only for admins and project owners.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "state_event",
            "in": "formData",
            "description": "State of the issue",
            "required": false,
            "type": "string",
            "enum": [
              "reopen",
              "close"
            ]
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of an issue",
            "required": false,
            "type": "string"
          },
          {
            "name": "assignee_id",
            "in": "formData",
            "description": "The ID of a user to assign issue",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "milestone_id",
            "in": "formData",
            "description": "The ID of a milestone to assign issue",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels",
            "in": "formData",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "due_date",
            "in": "formData",
            "description": "Date time string in the format YEAR-MONTH-DAY",
            "required": false,
            "type": "string"
          },
          {
            "name": "confidential",
            "in": "formData",
            "description": "Boolean parameter if the issue should be confidential",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "created_at",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing issue",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a project issue",
        "description": "Delete a project issue",
        "operationId": "deleteV3ProjectsIdIssuesIssueId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a project issue"
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/move": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Move an existing issue",
        "description": "Move an existing issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdMove",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of a project issue",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "to_project_id",
            "in": "formData",
            "description": "The ID of the new project",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Move an existing issue",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/labels": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all labels of the project",
        "description": "Get all labels of the project",
        "operationId": "getV3ProjectsIdLabels",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all labels of the project",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new label",
        "description": "Create a new label",
        "operationId": "postV3ProjectsIdLabels",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the label to be created",
            "required": true,
            "type": "string"
          },
          {
            "name": "color",
            "in": "formData",
            "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of label to be created",
            "required": false,
            "type": "string"
          },
          {
            "name": "priority",
            "in": "formData",
            "description": "The priority of the label",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new label",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing label. At least one optional parameter is required.",
        "description": "Update an existing label. At least one optional parameter is required.",
        "operationId": "putV3ProjectsIdLabels",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the label to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_name",
            "in": "formData",
            "description": "The new name of the label",
            "required": false,
            "type": "string"
          },
          {
            "name": "color",
            "in": "formData",
            "description": "The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The new description of label",
            "required": false,
            "type": "string"
          },
          {
            "name": "priority",
            "in": "formData",
            "description": "The priority of the label",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing label. At least one optional parameter is required.",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete an existing label",
        "description": "Delete an existing label",
        "operationId": "deleteV3ProjectsIdLabels",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the label to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an existing label",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/members": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets a list of group or project members viewable by the authenticated user.",
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "getV3ProjectsIdMembers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A query string to search for members",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Adds a member to a group or project.",
        "description": "Adds a member to a group or project.",
        "operationId": "postV3ProjectsIdMembers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "formData",
            "description": "The user ID of the new member",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "access_level",
            "in": "formData",
            "description": "A valid access level (defaults: `30`, developer access level)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "expires_at",
            "in": "formData",
            "description": "Date string in the format YEAR-MONTH-DAY",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "201": {
            "description": "Adds a member to a group or project.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/members/{user_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets a member of a group or project.",
        "description": "Gets a member of a group or project.",
        "operationId": "getV3ProjectsIdMembersUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the member",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a member of a group or project.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Updates a member of a group or project.",
        "description": "Updates a member of a group or project.",
        "operationId": "putV3ProjectsIdMembersUserId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the new member",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "access_level",
            "in": "formData",
            "description": "A valid access level",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "expires_at",
            "in": "formData",
            "description": "Date string in the format YEAR-MONTH-DAY",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a member of a group or project.",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Removes a user from a group or project.",
        "description": "Removes a user from a group or project.",
        "operationId": "deleteV3ProjectsIdMembersUserId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID of the member",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Removes a user from a group or project."
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/versions": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of merge request diff versions",
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a merge request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of merge request diff versions",
            "schema": {
              "$ref": "#/definitions/MergeRequestDiff"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single merge request diff version",
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a merge request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version_id",
            "in": "path",
            "description": "The ID of a merge request diff version",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request diff version",
            "schema": {
              "$ref": "#/definitions/MergeRequestDiffFull"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Set a time estimate for a project merge_request",
        "description": "Set a time estimate for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a project merge_request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "duration",
            "in": "formData",
            "description": "The duration to be parsed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Set a time estimate for a project merge_request"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Reset the time estimate for a project merge_request",
        "description": "Reset the time estimate for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a project merge_request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project merge_request"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add spent time for a project merge_request",
        "description": "Add spent time for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a project merge_request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "duration",
            "in": "formData",
            "description": "The duration to be parsed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add spent time for a project merge_request"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Reset spent time for a project merge_request",
        "description": "Reset spent time for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a project merge_request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Reset spent time for a project merge_request"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Show time stats for a project merge_request",
        "description": "Show time stats for a project merge_request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a project merge_request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Show time stats for a project merge_request"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List merge requests",
        "description": "List merge requests",
        "operationId": "getV3ProjectsIdMergeRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return opened, closed, merged, or all merge requests",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "opened",
              "closed",
              "merged",
              "all"
            ]
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return merge requests ordered by `created_at` or `updated_at` fields.",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return merge requests sorted in `asc` or `desc` order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "iid",
            "in": "formData",
            "description": "The IID of the merge requests",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List merge requests",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a merge request",
        "description": "Create a merge request",
        "operationId": "postV3ProjectsIdMergeRequests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the merge request",
            "required": true,
            "type": "string"
          },
          {
            "name": "source_branch",
            "in": "formData",
            "description": "The source branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "target_branch",
            "in": "formData",
            "description": "The target branch",
            "required": true,
            "type": "string"
          },
          {
            "name": "target_project_id",
            "in": "formData",
            "description": "The target project of the merge request defaults to the :id of the project",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the merge request",
            "required": false,
            "type": "string"
          },
          {
            "name": "assignee_id",
            "in": "formData",
            "description": "The ID of a user to assign the merge request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "milestone_id",
            "in": "formData",
            "description": "The ID of a milestone to assign the merge request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels",
            "in": "formData",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "remove_source_branch",
            "in": "formData",
            "description": "Remove source branch when merging",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single merge request",
        "description": "Get a single merge request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a merge request",
        "description": "Update a merge request",
        "operationId": "putV3ProjectsIdMergeRequestsMergeRequestId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the merge request",
            "required": false,
            "type": "string"
          },
          {
            "name": "target_branch",
            "in": "formData",
            "description": "The target branch",
            "required": false,
            "type": "string"
          },
          {
            "name": "state_event",
            "in": "formData",
            "description": "Status of the merge request",
            "required": false,
            "type": "string",
            "enum": [
              "close",
              "reopen",
              "merge"
            ]
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the merge request",
            "required": false,
            "type": "string"
          },
          {
            "name": "assignee_id",
            "in": "formData",
            "description": "The ID of a user to assign the merge request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "milestone_id",
            "in": "formData",
            "description": "The ID of a milestone to assign the merge request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels",
            "in": "formData",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "remove_source_branch",
            "in": "formData",
            "description": "Remove source branch when merging",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Update a merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a merge request",
        "description": "Delete a merge request",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a merge request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a merge request"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single merge request",
        "description": "This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of a merge request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a merge request",
        "description": "Update a merge request",
        "operationId": "putV3ProjectsIdMergeRequestMergeRequestId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the merge request",
            "required": false,
            "type": "string"
          },
          {
            "name": "target_branch",
            "in": "formData",
            "description": "The target branch",
            "required": false,
            "type": "string"
          },
          {
            "name": "state_event",
            "in": "formData",
            "description": "Status of the merge request",
            "required": false,
            "type": "string",
            "enum": [
              "close",
              "reopen",
              "merge"
            ]
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the merge request",
            "required": false,
            "type": "string"
          },
          {
            "name": "assignee_id",
            "in": "formData",
            "description": "The ID of a user to assign the merge request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "milestone_id",
            "in": "formData",
            "description": "The ID of a milestone to assign the merge request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels",
            "in": "formData",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "remove_source_branch",
            "in": "formData",
            "description": "Remove source branch when merging",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Update a merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/commits": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the commits of a merge request",
        "description": "Get the commits of a merge request",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the commits of a merge request",
            "schema": {
              "$ref": "#/definitions/RepoCommit"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/changes": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Show the merge request changes",
        "description": "Show the merge request changes",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Show the merge request changes",
            "schema": {
              "$ref": "#/definitions/MergeRequestChanges"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/merge": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Merge a merge request",
        "description": "Merge a merge request",
        "operationId": "putV3ProjectsIdMergeRequestMergeRequestIdMerge",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_commit_message",
            "in": "formData",
            "description": "Custom merge commit message",
            "required": false,
            "type": "string"
          },
          {
            "name": "should_remove_source_branch",
            "in": "formData",
            "description": "When true, the source branch will be deleted if possible",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_when_build_succeeds",
            "in": "formData",
            "description": "When true, this merge request will be merged when the pipeline succeeds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sha",
            "in": "formData",
            "description": "When present, must have the HEAD SHA of the source branch",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Merge a merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/comments": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the comments of a merge request",
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the comments of a merge request",
            "schema": {
              "$ref": "#/definitions/MRNote"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Post a comment to a merge request",
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "postV3ProjectsIdMergeRequestMergeRequestIdComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "formData",
            "description": "The text of the comment",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Post a comment to a merge request",
            "schema": {
              "$ref": "#/definitions/MRNote"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List issues that will be closed on merge",
        "description": "List issues that will be closed on merge",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List issues that will be closed on merge",
            "schema": {
              "$ref": "#/definitions/MRNote"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/commits": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the commits of a merge request",
        "description": "Get the commits of a merge request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the commits of a merge request",
            "schema": {
              "$ref": "#/definitions/RepoCommit"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/changes": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Show the merge request changes",
        "description": "Show the merge request changes",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Show the merge request changes",
            "schema": {
              "$ref": "#/definitions/MergeRequestChanges"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/merge": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Merge a merge request",
        "description": "Merge a merge request",
        "operationId": "putV3ProjectsIdMergeRequestsMergeRequestIdMerge",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_commit_message",
            "in": "formData",
            "description": "Custom merge commit message",
            "required": false,
            "type": "string"
          },
          {
            "name": "should_remove_source_branch",
            "in": "formData",
            "description": "When true, the source branch will be deleted if possible",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_when_build_succeeds",
            "in": "formData",
            "description": "When true, this merge request will be merged when the pipeline succeeds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sha",
            "in": "formData",
            "description": "When present, must have the HEAD SHA of the source branch",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Merge a merge request",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/comments": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the comments of a merge request",
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the comments of a merge request",
            "schema": {
              "$ref": "#/definitions/MRNote"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Post a comment to a merge request",
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "formData",
            "description": "The text of the comment",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Post a comment to a merge request",
            "schema": {
              "$ref": "#/definitions/MRNote"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List issues that will be closed on merge",
        "description": "List issues that will be closed on merge",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List issues that will be closed on merge",
            "schema": {
              "$ref": "#/definitions/MRNote"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/milestones": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project milestones",
        "description": "Get a list of project milestones",
        "operationId": "getV3ProjectsIdMilestones",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Return \"active\", \"closed\", or \"all\" milestones",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "active",
              "closed",
              "all"
            ]
          },
          {
            "name": "iid",
            "in": "formData",
            "description": "The IID of the milestone",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project milestones",
            "schema": {
              "$ref": "#/definitions/Milestone"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project milestone",
        "description": "Create a new project milestone",
        "operationId": "postV3ProjectsIdMilestones",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the milestone",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the milestone",
            "required": false,
            "type": "string"
          },
          {
            "name": "due_date",
            "in": "formData",
            "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "formData",
            "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new project milestone",
            "schema": {
              "$ref": "#/definitions/Milestone"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/milestones/{milestone_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single project milestone",
        "description": "Get a single project milestone",
        "operationId": "getV3ProjectsIdMilestonesMilestoneId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "milestone_id",
            "in": "path",
            "description": "The ID of a project milestone",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project milestone",
            "schema": {
              "$ref": "#/definitions/Milestone"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing project milestone",
        "description": "Update an existing project milestone",
        "operationId": "putV3ProjectsIdMilestonesMilestoneId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "milestone_id",
            "in": "path",
            "description": "The ID of a project milestone",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the milestone",
            "required": false,
            "type": "string"
          },
          {
            "name": "state_event",
            "in": "formData",
            "description": "The state event of the milestone ",
            "required": false,
            "type": "string",
            "enum": [
              "close",
              "activate"
            ]
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the milestone",
            "required": false,
            "type": "string"
          },
          {
            "name": "due_date",
            "in": "formData",
            "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "formData",
            "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing project milestone",
            "schema": {
              "$ref": "#/definitions/Milestone"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/milestones/{milestone_id}/issues": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all issues for a single project milestone",
        "description": "Get all issues for a single project milestone",
        "operationId": "getV3ProjectsIdMilestonesMilestoneIdIssues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "milestone_id",
            "in": "path",
            "description": "The ID of a project milestone",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all issues for a single project milestone",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{noteable_id}/notes": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +noteable+ notes",
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdIssuesNoteableIdNotes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +noteable+ notes",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new +noteable+ note",
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdIssuesNoteableIdNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "The content of a note",
            "required": true,
            "type": "string"
          },
          {
            "name": "created_at",
            "in": "formData",
            "description": "The creation date of the note",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single +noteable+ note",
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing +noteable+ note",
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "The content of a note",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +noteable+ note",
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{noteable_id}/notes": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +noteable+ notes",
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdMergeRequestsNoteableIdNotes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +noteable+ notes",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new +noteable+ note",
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdMergeRequestsNoteableIdNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "The content of a note",
            "required": true,
            "type": "string"
          },
          {
            "name": "created_at",
            "in": "formData",
            "description": "The creation date of the note",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single +noteable+ note",
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing +noteable+ note",
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "The content of a note",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +noteable+ note",
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{noteable_id}/notes": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of project +noteable+ notes",
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdSnippetsNoteableIdNotes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +noteable+ notes",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new +noteable+ note",
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdSnippetsNoteableIdNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "The content of a note",
            "required": true,
            "type": "string"
          },
          {
            "name": "created_at",
            "in": "formData",
            "description": "The creation date of the note",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single +noteable+ note",
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing +noteable+ note",
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "The content of a note",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a +noteable+ note",
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteable_id",
            "in": "path",
            "description": "The ID of the noteable",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The ID of a note",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +noteable+ note",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/notification_settings": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project level notification level settings, defaults to Global",
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3ProjectsIdNotificationSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get project level notification level settings, defaults to Global",
            "schema": {
              "$ref": "#/definitions/NotificationSetting"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update project level notification level settings, defaults to Global",
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3ProjectsIdNotificationSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "in": "formData",
            "description": "The project notification level",
            "required": false,
            "type": "string"
          },
          {
            "name": "new_note",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "new_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reopen_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "close_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reassign_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "new_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reopen_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "close_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reassign_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "failed_pipeline",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "success_pipeline",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update project level notification level settings, defaults to Global",
            "schema": {
              "$ref": "#/definitions/NotificationSetting"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/pipelines": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all Pipelines of the project",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdPipelines",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Either running, branches, or tags",
            "required": false,
            "type": "string",
            "enum": [
              "running",
              "branches",
              "tags"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Get all Pipelines of the project",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/pipeline": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new pipeline",
        "description": "This feature was introduced in GitLab 8.14",
        "operationId": "postV3ProjectsIdPipeline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "Reference",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new pipeline",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets a specific pipeline for the project",
        "description": "This feature was introduced in GitLab 8.11",
        "operationId": "getV3ProjectsIdPipelinesPipelineId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "description": "The pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a specific pipeline for the project",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}/retry": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Retry failed builds in the pipeline",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdPipelinesPipelineIdRetry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "description": "The pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Retry failed builds in the pipeline",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}/cancel": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Cancel all builds in the pipeline",
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdPipelinesPipelineIdCancel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "description": "The pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel all builds in the pipeline",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/hooks": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project hooks",
        "description": "Get project hooks",
        "operationId": "getV3ProjectsIdHooks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get project hooks",
            "schema": {
              "$ref": "#/definitions/ProjectHook"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add hook to project",
        "description": "Add hook to project",
        "operationId": "postV3ProjectsIdHooks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "url",
            "in": "formData",
            "description": "The URL to send the request to",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Trigger hook on push events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "issues_events",
            "in": "formData",
            "description": "Trigger hook on issues events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_requests_events",
            "in": "formData",
            "description": "Trigger hook on merge request events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Trigger hook on tag push events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "note_events",
            "in": "formData",
            "description": "Trigger hook on note(comment) events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "build_events",
            "in": "formData",
            "description": "Trigger hook on build events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pipeline_events",
            "in": "formData",
            "description": "Trigger hook on pipeline events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wiki_page_events",
            "in": "formData",
            "description": "Trigger hook on wiki events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable_ssl_verification",
            "in": "formData",
            "description": "Do SSL verification when triggering the hook",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "Secret token to validate received payloads; this will not be returned in the response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add hook to project",
            "schema": {
              "$ref": "#/definitions/ProjectHook"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/hooks/{hook_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a project hook",
        "description": "Get a project hook",
        "operationId": "getV3ProjectsIdHooksHookId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "hook_id",
            "in": "path",
            "description": "The ID of a project hook",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project hook",
            "schema": {
              "$ref": "#/definitions/ProjectHook"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing project hook",
        "description": "Update an existing project hook",
        "operationId": "putV3ProjectsIdHooksHookId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "hook_id",
            "in": "path",
            "description": "The ID of the hook to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "url",
            "in": "formData",
            "description": "The URL to send the request to",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Trigger hook on push events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "issues_events",
            "in": "formData",
            "description": "Trigger hook on issues events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_requests_events",
            "in": "formData",
            "description": "Trigger hook on merge request events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Trigger hook on tag push events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "note_events",
            "in": "formData",
            "description": "Trigger hook on note(comment) events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "build_events",
            "in": "formData",
            "description": "Trigger hook on build events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pipeline_events",
            "in": "formData",
            "description": "Trigger hook on pipeline events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wiki_page_events",
            "in": "formData",
            "description": "Trigger hook on wiki events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable_ssl_verification",
            "in": "formData",
            "description": "Do SSL verification when triggering the hook",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "Secret token to validate received payloads; this will not be returned in the response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing project hook",
            "schema": {
              "$ref": "#/definitions/ProjectHook"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Deletes project hook",
        "description": "Deletes project hook",
        "operationId": "deleteV3ProjectsIdHooksHookId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "hook_id",
            "in": "path",
            "description": "The ID of the hook to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes project hook",
            "schema": {
              "$ref": "#/definitions/ProjectHook"
            }
          }
        }
      }
    },
    "/v3/projects/visible": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of visible projects for authenticated user",
        "description": "Get a list of visible projects for authenticated user",
        "operationId": "getV3ProjectsVisible",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "required": false,
            "type": "string",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of authorized projects matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only the ID, URL, name, and path of each project",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of visible projects for authenticated user",
            "schema": {
              "$ref": "#/definitions/BasicProjectDetails"
            }
          }
        }
      }
    },
    "/v3/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a projects list for authenticated user",
        "description": "Get a projects list for authenticated user",
        "operationId": "getV3Projects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "required": false,
            "type": "string",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of authorized projects matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only the ID, URL, name, and path of each project",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a projects list for authenticated user",
            "schema": {
              "$ref": "#/definitions/BasicProjectDetails"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create new project",
        "description": "Create new project",
        "operationId": "postV3Projects",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "formData",
            "description": "The path of the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the project",
            "required": false,
            "type": "string"
          },
          {
            "name": "issues_enabled",
            "in": "formData",
            "description": "Flag indication if the issue tracker is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_requests_enabled",
            "in": "formData",
            "description": "Flag indication if merge requests are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wiki_enabled",
            "in": "formData",
            "description": "Flag indication if the wiki is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "builds_enabled",
            "in": "formData",
            "description": "Flag indication if builds are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "snippets_enabled",
            "in": "formData",
            "description": "Flag indication if snippets are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "shared_runners_enabled",
            "in": "formData",
            "description": "Flag indication if shared runners are enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "container_registry_enabled",
            "in": "formData",
            "description": "Flag indication if the container registry is enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lfs_enabled",
            "in": "formData",
            "description": "Flag indication if Git LFS is enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "public",
            "in": "formData",
            "description": "Create a public project. The same as visibility_level = 20.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "Create a public project. The same as visibility_level = 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          },
          {
            "name": "public_builds",
            "in": "formData",
            "description": "Perform public builds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request_access_enabled",
            "in": "formData",
            "description": "Allow users to request member access",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_allow_merge_if_build_succeeds",
            "in": "formData",
            "description": "Only allow to merge if builds succeed",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_allow_merge_if_all_discussions_are_resolved",
            "in": "formData",
            "description": "Only allow to merge if all discussions are resolved",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "namespace_id",
            "in": "formData",
            "description": "Namespace ID for the new project. Default to the user namespace.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "import_url",
            "in": "formData",
            "description": "URL from which the project is imported",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create new project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/owned": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get an owned projects list for authenticated user",
        "description": "Get an owned projects list for authenticated user",
        "operationId": "getV3ProjectsOwned",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "required": false,
            "type": "string",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of authorized projects matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only the ID, URL, name, and path of each project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "Include project statistics",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an owned projects list for authenticated user",
            "schema": {
              "$ref": "#/definitions/BasicProjectDetails"
            }
          }
        }
      }
    },
    "/v3/projects/starred": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets starred project for the authenticated user",
        "description": "Gets starred project for the authenticated user",
        "operationId": "getV3ProjectsStarred",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "required": false,
            "type": "string",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of authorized projects matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only the ID, URL, name, and path of each project",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets starred project for the authenticated user",
            "schema": {
              "$ref": "#/definitions/BasicProjectDetails"
            }
          }
        }
      }
    },
    "/v3/projects/all": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all projects for admin user",
        "description": "Get all projects for admin user",
        "operationId": "getV3ProjectsAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Limit by archived status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Limit by visibility",
            "required": false,
            "type": "string",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of authorized projects matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "simple",
            "in": "query",
            "description": "Return only the ID, URL, name, and path of each project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "Include project statistics",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all projects for admin user",
            "schema": {
              "$ref": "#/definitions/BasicProjectDetails"
            }
          }
        }
      }
    },
    "/v3/projects/search/{query}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Search for projects the current user has access to",
        "description": "Search for projects the current user has access to",
        "operationId": "getV3ProjectsSearchQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "The project name to be searched",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return projects ordered by field",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return projects sorted in ascending and descending order",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for projects the current user has access to",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/user/{user_id}": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create new project for a specified user. Only available to admin users.",
        "description": "Create new project for a specified user. Only available to admin users.",
        "operationId": "postV3ProjectsUserUserId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The ID of a user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "default_branch",
            "in": "formData",
            "description": "The default branch of the project",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the project",
            "required": false,
            "type": "string"
          },
          {
            "name": "issues_enabled",
            "in": "formData",
            "description": "Flag indication if the issue tracker is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_requests_enabled",
            "in": "formData",
            "description": "Flag indication if merge requests are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wiki_enabled",
            "in": "formData",
            "description": "Flag indication if the wiki is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "builds_enabled",
            "in": "formData",
            "description": "Flag indication if builds are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "snippets_enabled",
            "in": "formData",
            "description": "Flag indication if snippets are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "shared_runners_enabled",
            "in": "formData",
            "description": "Flag indication if shared runners are enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "container_registry_enabled",
            "in": "formData",
            "description": "Flag indication if the container registry is enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lfs_enabled",
            "in": "formData",
            "description": "Flag indication if Git LFS is enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "public",
            "in": "formData",
            "description": "Create a public project. The same as visibility_level = 20.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "Create a public project. The same as visibility_level = 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          },
          {
            "name": "public_builds",
            "in": "formData",
            "description": "Perform public builds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request_access_enabled",
            "in": "formData",
            "description": "Allow users to request member access",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_allow_merge_if_build_succeeds",
            "in": "formData",
            "description": "Only allow to merge if builds succeed",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_allow_merge_if_all_discussions_are_resolved",
            "in": "formData",
            "description": "Only allow to merge if all discussions are resolved",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "namespace_id",
            "in": "formData",
            "description": "Namespace ID for the new project. Default to the user namespace.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "import_url",
            "in": "formData",
            "description": "URL from which the project is imported",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create new project for a specified user. Only available to admin users.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/{id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single project",
        "description": "Get a single project",
        "operationId": "getV3ProjectsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project",
            "schema": {
              "$ref": "#/definitions/ProjectWithAccess"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing project",
        "description": "Update an existing project",
        "operationId": "putV3ProjectsId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the project",
            "required": false,
            "type": "string"
          },
          {
            "name": "default_branch",
            "in": "formData",
            "description": "The default branch of the project",
            "required": false,
            "type": "string"
          },
          {
            "name": "path",
            "in": "formData",
            "description": "The path of the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the project",
            "required": false,
            "type": "string"
          },
          {
            "name": "issues_enabled",
            "in": "formData",
            "description": "Flag indication if the issue tracker is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_requests_enabled",
            "in": "formData",
            "description": "Flag indication if merge requests are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wiki_enabled",
            "in": "formData",
            "description": "Flag indication if the wiki is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "builds_enabled",
            "in": "formData",
            "description": "Flag indication if builds are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "snippets_enabled",
            "in": "formData",
            "description": "Flag indication if snippets are enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "shared_runners_enabled",
            "in": "formData",
            "description": "Flag indication if shared runners are enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "container_registry_enabled",
            "in": "formData",
            "description": "Flag indication if the container registry is enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lfs_enabled",
            "in": "formData",
            "description": "Flag indication if Git LFS is enabled for that project",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "public",
            "in": "formData",
            "description": "Create a public project. The same as visibility_level = 20.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "Create a public project. The same as visibility_level = 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          },
          {
            "name": "public_builds",
            "in": "formData",
            "description": "Perform public builds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request_access_enabled",
            "in": "formData",
            "description": "Allow users to request member access",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_allow_merge_if_build_succeeds",
            "in": "formData",
            "description": "Only allow to merge if builds succeed",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_allow_merge_if_all_discussions_are_resolved",
            "in": "formData",
            "description": "Only allow to merge if all discussions are resolved",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove a project",
        "description": "Remove a project",
        "operationId": "deleteV3ProjectsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a project"
          }
        }
      }
    },
    "/v3/projects/{id}/events": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get events for a single project",
        "description": "Get events for a single project",
        "operationId": "getV3ProjectsIdEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get events for a single project",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/v3/projects/fork/{id}": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Fork new project for the current user or provided namespace.",
        "description": "Fork new project for the current user or provided namespace.",
        "operationId": "postV3ProjectsForkId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "formData",
            "description": "The ID or name of the namespace that the project will be forked into",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Fork new project for the current user or provided namespace.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/archive": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Archive a project",
        "description": "Archive a project",
        "operationId": "postV3ProjectsIdArchive",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Archive a project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/unarchive": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Unarchive a project",
        "description": "Unarchive a project",
        "operationId": "postV3ProjectsIdUnarchive",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Unarchive a project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/star": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Star a project",
        "description": "Star a project",
        "operationId": "postV3ProjectsIdStar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Star a project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Unstar a project",
        "description": "Unstar a project",
        "operationId": "deleteV3ProjectsIdStar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unstar a project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/fork/{forked_from_id}": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Mark this project as forked from another",
        "description": "Mark this project as forked from another",
        "operationId": "postV3ProjectsIdForkForkedFromId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "forked_from_id",
            "in": "path",
            "description": "The ID of the project it was forked from",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Mark this project as forked from another"
          }
        }
      }
    },
    "/v3/projects/{id}/fork": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove a forked_from relationship",
        "description": "Remove a forked_from relationship",
        "operationId": "deleteV3ProjectsIdFork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a forked_from relationship"
          }
        }
      }
    },
    "/v3/projects/{id}/share": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Share the project with a group",
        "description": "Share the project with a group",
        "operationId": "postV3ProjectsIdShare",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "group_id",
            "in": "formData",
            "description": "The ID of a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "group_access",
            "in": "formData",
            "description": "The group access level",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              10,
              20,
              30,
              40
            ]
          },
          {
            "name": "expires_at",
            "in": "formData",
            "description": "Share expiration date",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "201": {
            "description": "Share the project with a group",
            "schema": {
              "$ref": "#/definitions/ProjectGroupLink"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/share/{group_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "operationId": "deleteV3ProjectsIdShareGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Share"
          }
        }
      }
    },
    "/v3/projects/{id}/uploads": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Upload a file",
        "description": "Upload a file",
        "operationId": "postV3ProjectsIdUploads",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file to be uploaded",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Upload a file"
          }
        }
      }
    },
    "/v3/projects/{id}/users": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the users list of a project",
        "description": "Get the users list of a project",
        "operationId": "getV3ProjectsIdUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Return list of users matching the search criteria",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the users list of a project",
            "schema": {
              "$ref": "#/definitions/UserBasic"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all project snippets",
        "description": "Get all project snippets",
        "operationId": "getV3ProjectsIdSnippets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all project snippets",
            "schema": {
              "$ref": "#/definitions/ProjectSnippet"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project snippet",
        "description": "Create a new project snippet",
        "operationId": "postV3ProjectsIdSnippets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the snippet",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_name",
            "in": "formData",
            "description": "The file name of the snippet",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "formData",
            "description": "The content of the snippet",
            "required": true,
            "type": "string"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "The visibility level of the snippet",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new project snippet",
            "schema": {
              "$ref": "#/definitions/ProjectSnippet"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single project snippet",
        "description": "Get a single project snippet",
        "operationId": "getV3ProjectsIdSnippetsSnippetId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "description": "The ID of a project snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project snippet",
            "schema": {
              "$ref": "#/definitions/ProjectSnippet"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing project snippet",
        "description": "Update an existing project snippet",
        "operationId": "putV3ProjectsIdSnippetsSnippetId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "description": "The ID of a project snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the snippet",
            "required": false,
            "type": "string"
          },
          {
            "name": "file_name",
            "in": "formData",
            "description": "The file name of the snippet",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "formData",
            "description": "The content of the snippet",
            "required": false,
            "type": "string"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "The visibility level of the snippet",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing project snippet",
            "schema": {
              "$ref": "#/definitions/ProjectSnippet"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a project snippet",
        "description": "Delete a project snippet",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "description": "The ID of a project snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a project snippet"
          }
        }
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/raw": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a raw project snippet",
        "description": "Get a raw project snippet",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdRaw",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "snippet_id",
            "in": "path",
            "description": "The ID of a project snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw project snippet"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/tree": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a project repository tree",
        "description": "Get a project repository tree",
        "operationId": "getV3ProjectsIdRepositoryTree",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref_name",
            "in": "query",
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The path of the tree",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Used to get a recursive tree",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository tree",
            "schema": {
              "$ref": "#/definitions/RepoTreeObject"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/blobs/{sha}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a raw file contents",
        "description": "Get a raw file contents",
        "operationId": "getV3ProjectsIdRepositoryBlobsSha",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The commit, branch name, or tag name",
            "required": true,
            "type": "string"
          },
          {
            "name": "filepath",
            "in": "query",
            "description": "The path to the file to display",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw file contents"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/blob": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a raw file contents",
        "description": "Get a raw file contents",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaBlob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The commit, branch name, or tag name",
            "required": true,
            "type": "string"
          },
          {
            "name": "filepath",
            "in": "query",
            "description": "The path to the file to display",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw file contents"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/raw_blobs/{sha}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a raw blob contents by blob sha",
        "description": "Get a raw blob contents by blob sha",
        "operationId": "getV3ProjectsIdRepositoryRawBlobsSha",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "description": "The commit, branch name, or tag name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw blob contents by blob sha"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/archive": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get an archive of the repository",
        "description": "Get an archive of the repository",
        "operationId": "getV3ProjectsIdRepositoryArchive",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "query",
            "description": "The commit sha of the archive to be downloaded",
            "required": false,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "The archive format",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an archive of the repository"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/compare": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Compare two branches, tags, or commits",
        "description": "Compare two branches, tags, or commits",
        "operationId": "getV3ProjectsIdRepositoryCompare",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "The commit, branch name, or tag name to start comparison",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "The commit, branch name, or tag name to stop comparison",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Compare two branches, tags, or commits",
            "schema": {
              "$ref": "#/definitions/Compare"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/contributors": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get repository contributors",
        "description": "Get repository contributors",
        "operationId": "getV3ProjectsIdRepositoryContributors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get repository contributors",
            "schema": {
              "$ref": "#/definitions/Contributor"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/runners": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get runners available for project",
        "description": "Get runners available for project",
        "operationId": "getV3ProjectsIdRunners",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of specific runners to show",
            "required": false,
            "type": "string",
            "enum": [
              "active",
              "paused",
              "online",
              "specific",
              "shared"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get runners available for project",
            "schema": {
              "$ref": "#/definitions/Runner"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Enable a runner for a project",
        "description": "Enable a runner for a project",
        "operationId": "postV3ProjectsIdRunners",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "runner_id",
            "in": "formData",
            "description": "The ID of the runner",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Enable a runner for a project",
            "schema": {
              "$ref": "#/definitions/Runner"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/runners/{runner_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Disable project's runner",
        "description": "Disable project's runner",
        "operationId": "deleteV3ProjectsIdRunnersRunnerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "runner_id",
            "in": "path",
            "description": "The ID of the runner",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Disable project's runner",
            "schema": {
              "$ref": "#/definitions/Runner"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/services/asana": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set asana service for project",
        "description": "Set asana service for project",
        "operationId": "putV3ProjectsIdServicesAsana",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "formData",
            "description": "User API token",
            "required": true,
            "type": "string"
          },
          {
            "name": "restrict_to_branch",
            "in": "formData",
            "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set asana service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/assembla": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set assembla service for project",
        "description": "Set assembla service for project",
        "operationId": "putV3ProjectsIdServicesAssembla",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "The authentication token",
            "required": true,
            "type": "string"
          },
          {
            "name": "subdomain",
            "in": "formData",
            "description": "Subdomain setting",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set assembla service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/bamboo": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set bamboo service for project",
        "description": "Set bamboo service for project",
        "operationId": "putV3ProjectsIdServicesBamboo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bamboo_url",
            "in": "formData",
            "description": "Bamboo root URL like https://bamboo.example.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_key",
            "in": "formData",
            "description": "Bamboo build plan key like",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "A user with API access, if applicable",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Passord of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set bamboo service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/bugzilla": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set bugzilla service for project",
        "description": "Set bugzilla service for project",
        "operationId": "putV3ProjectsIdServicesBugzilla",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_issue_url",
            "in": "formData",
            "description": "New issue URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "issues_url",
            "in": "formData",
            "description": "Issues URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_url",
            "in": "formData",
            "description": "Project URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Description",
            "required": false,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set bugzilla service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/buildkite": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set buildkite service for project",
        "description": "Set buildkite service for project",
        "operationId": "putV3ProjectsIdServicesBuildkite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "Buildkite project GitLab token",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_url",
            "in": "formData",
            "description": "The buildkite project URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable_ssl_verification",
            "in": "formData",
            "description": "Enable SSL verification for communication",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set buildkite service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/builds-email": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set builds-email service for project",
        "description": "Set builds-email service for project",
        "operationId": "putV3ProjectsIdServicesBuildsEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipients",
            "in": "formData",
            "description": "Comma-separated list of recipient email addresses",
            "required": true,
            "type": "string"
          },
          {
            "name": "add_pusher",
            "in": "formData",
            "description": "Add pusher to recipients list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "notify_only_broken_builds",
            "in": "formData",
            "description": "Notify only broken builds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "build_events",
            "in": "formData",
            "description": "Event will be triggered when a build status changes",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set builds-email service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/campfire": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set campfire service for project",
        "description": "Set campfire service for project",
        "operationId": "putV3ProjectsIdServicesCampfire",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "Campfire token",
            "required": true,
            "type": "string"
          },
          {
            "name": "subdomain",
            "in": "formData",
            "description": "Campfire subdomain",
            "required": false,
            "type": "string"
          },
          {
            "name": "room",
            "in": "formData",
            "description": "Campfire room",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set campfire service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/custom-issue-tracker": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set custom-issue-tracker service for project",
        "description": "Set custom-issue-tracker service for project",
        "operationId": "putV3ProjectsIdServicesCustomIssueTracker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_issue_url",
            "in": "formData",
            "description": "New issue URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "issues_url",
            "in": "formData",
            "description": "Issues URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_url",
            "in": "formData",
            "description": "Project URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Description",
            "required": false,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set custom-issue-tracker service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/drone-ci": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set drone-ci service for project",
        "description": "Set drone-ci service for project",
        "operationId": "putV3ProjectsIdServicesDroneCi",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "Drone CI token",
            "required": true,
            "type": "string"
          },
          {
            "name": "drone_url",
            "in": "formData",
            "description": "Drone CI URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable_ssl_verification",
            "in": "formData",
            "description": "Enable SSL verification for communication",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_events",
            "in": "formData",
            "description": "Event will be triggered when a merge request is created/updated/merged",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Event will be triggered when a new tag is pushed to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set drone-ci service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/emails-on-push": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set emails-on-push service for project",
        "description": "Set emails-on-push service for project",
        "operationId": "putV3ProjectsIdServicesEmailsOnPush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipients",
            "in": "formData",
            "description": "Comma-separated list of recipient email addresses",
            "required": true,
            "type": "string"
          },
          {
            "name": "disable_diffs",
            "in": "formData",
            "description": "Disable code diffs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "send_from_committer_email",
            "in": "formData",
            "description": "Send from committer",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Event will be triggered when a new tag is pushed to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set emails-on-push service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/external-wiki": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set external-wiki service for project",
        "description": "Set external-wiki service for project",
        "operationId": "putV3ProjectsIdServicesExternalWiki",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "external_wiki_url",
            "in": "formData",
            "description": "The URL of the external Wiki",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set external-wiki service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/flowdock": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set flowdock service for project",
        "description": "Set flowdock service for project",
        "operationId": "putV3ProjectsIdServicesFlowdock",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "Flowdock token",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set flowdock service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/gemnasium": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set gemnasium service for project",
        "description": "Set gemnasium service for project",
        "operationId": "putV3ProjectsIdServicesGemnasium",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "formData",
            "description": "Your personal API key on gemnasium.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "The project's slug on gemnasium.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set gemnasium service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/hipchat": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set hipchat service for project",
        "description": "Set hipchat service for project",
        "operationId": "putV3ProjectsIdServicesHipchat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "The room token",
            "required": true,
            "type": "string"
          },
          {
            "name": "room",
            "in": "formData",
            "description": "The room name or ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "color",
            "in": "formData",
            "description": "The room color",
            "required": false,
            "type": "string"
          },
          {
            "name": "notify",
            "in": "formData",
            "description": "Enable notifications",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "api_version",
            "in": "formData",
            "description": "Leave blank for default (v2)",
            "required": false,
            "type": "string"
          },
          {
            "name": "server",
            "in": "formData",
            "description": "Leave blank for default. https://hipchat.example.com",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "issue_events",
            "in": "formData",
            "description": "Event will be triggered when an issue is created/updated/closed",
            "required": false,
            "type": "string"
          },
          {
            "name": "confidential_issue_events",
            "in": "formData",
            "description": "Event will be triggered when a confidential issue is created/updated/closed",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_events",
            "in": "formData",
            "description": "Event will be triggered when a merge request is created/updated/merged",
            "required": false,
            "type": "string"
          },
          {
            "name": "note_events",
            "in": "formData",
            "description": "Event will be triggered when someone adds a comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Event will be triggered when a new tag is pushed to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "build_events",
            "in": "formData",
            "description": "Event will be triggered when a build status changes",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set hipchat service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/irker": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set irker service for project",
        "description": "Set irker service for project",
        "operationId": "putV3ProjectsIdServicesIrker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipients",
            "in": "formData",
            "description": "Recipients/channels separated by whitespaces",
            "required": true,
            "type": "string"
          },
          {
            "name": "default_irc_uri",
            "in": "formData",
            "description": "Default: irc://irc.network.net:6697",
            "required": false,
            "type": "string"
          },
          {
            "name": "server_host",
            "in": "formData",
            "description": "Server host. Default localhost",
            "required": false,
            "type": "string"
          },
          {
            "name": "server_port",
            "in": "formData",
            "description": "Server port. Default 6659",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "colorize_messages",
            "in": "formData",
            "description": "Colorize messages",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set irker service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/jira": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set jira service for project",
        "description": "Set jira service for project",
        "operationId": "putV3ProjectsIdServicesJira",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "formData",
            "description": "The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_key",
            "in": "formData",
            "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "The username of the user created to be used with GitLab/JIRA",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password of the user created to be used with GitLab/JIRA",
            "required": false,
            "type": "string"
          },
          {
            "name": "jira_issue_transition_id",
            "in": "formData",
            "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "commit_events",
            "in": "formData",
            "description": "Event will be triggered when a commit is created/updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_events",
            "in": "formData",
            "description": "Event will be triggered when a merge request is created/updated/merged",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set jira service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/kubernetes": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set kubernetes service for project",
        "description": "Set kubernetes service for project",
        "operationId": "putV3ProjectsIdServicesKubernetes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "formData",
            "description": "The Kubernetes namespace to use",
            "required": true,
            "type": "string"
          },
          {
            "name": "api_url",
            "in": "formData",
            "description": "The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "The service token to authenticate against the Kubernetes cluster with",
            "required": true,
            "type": "string"
          },
          {
            "name": "ca_pem",
            "in": "formData",
            "description": "A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set kubernetes service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/mattermost-slash-commands": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set mattermost-slash-commands service for project",
        "description": "Set mattermost-slash-commands service for project",
        "operationId": "putV3ProjectsIdServicesMattermostSlashCommands",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "The Mattermost token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set mattermost-slash-commands service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/slack-slash-commands": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set slack-slash-commands service for project",
        "description": "Set slack-slash-commands service for project",
        "operationId": "putV3ProjectsIdServicesSlackSlashCommands",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "The Slack token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set slack-slash-commands service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/pipelines-email": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set pipelines-email service for project",
        "description": "Set pipelines-email service for project",
        "operationId": "putV3ProjectsIdServicesPipelinesEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipients",
            "in": "formData",
            "description": "Comma-separated list of recipient email addresses",
            "required": true,
            "type": "string"
          },
          {
            "name": "notify_only_broken_builds",
            "in": "formData",
            "description": "Notify only broken builds",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pipeline_events",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set pipelines-email service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/pivotaltracker": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set pivotaltracker service for project",
        "description": "Set pivotaltracker service for project",
        "operationId": "putV3ProjectsIdServicesPivotaltracker",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "The Pivotaltracker token",
            "required": true,
            "type": "string"
          },
          {
            "name": "restrict_to_branch",
            "in": "formData",
            "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches.",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set pivotaltracker service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/pushover": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set pushover service for project",
        "description": "Set pushover service for project",
        "operationId": "putV3ProjectsIdServicesPushover",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "formData",
            "description": "The application key",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_key",
            "in": "formData",
            "description": "The user key",
            "required": true,
            "type": "string"
          },
          {
            "name": "priority",
            "in": "formData",
            "description": "The priority",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "formData",
            "description": "Leave blank for all active devices",
            "required": true,
            "type": "string"
          },
          {
            "name": "sound",
            "in": "formData",
            "description": "The sound of the notification",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set pushover service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/redmine": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set redmine service for project",
        "description": "Set redmine service for project",
        "operationId": "putV3ProjectsIdServicesRedmine",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_issue_url",
            "in": "formData",
            "description": "The new issue URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_url",
            "in": "formData",
            "description": "The project URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "issues_url",
            "in": "formData",
            "description": "The issues URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the tracker",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set redmine service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/slack": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set slack service for project",
        "description": "Set slack service for project",
        "operationId": "putV3ProjectsIdServicesSlack",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhook",
            "in": "formData",
            "description": "The Slack webhook. e.g. https://hooks.slack.com/services/...",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_issue_url",
            "in": "formData",
            "description": "The user name",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "formData",
            "description": "The channel name",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "issue_events",
            "in": "formData",
            "description": "Event will be triggered when an issue is created/updated/closed",
            "required": false,
            "type": "string"
          },
          {
            "name": "confidential_issue_events",
            "in": "formData",
            "description": "Event will be triggered when a confidential issue is created/updated/closed",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_events",
            "in": "formData",
            "description": "Event will be triggered when a merge request is created/updated/merged",
            "required": false,
            "type": "string"
          },
          {
            "name": "note_events",
            "in": "formData",
            "description": "Event will be triggered when someone adds a comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Event will be triggered when a new tag is pushed to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "build_events",
            "in": "formData",
            "description": "Event will be triggered when a build status changes",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipeline_events",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wiki_page_events",
            "in": "formData",
            "description": "Event will be triggered when a wiki page is created/updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set slack service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/mattermost": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set mattermost service for project",
        "description": "Set mattermost service for project",
        "operationId": "putV3ProjectsIdServicesMattermost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhook",
            "in": "formData",
            "description": "The Mattermost webhook. e.g. http://mattermost_host/hooks/...",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "issue_events",
            "in": "formData",
            "description": "Event will be triggered when an issue is created/updated/closed",
            "required": false,
            "type": "string"
          },
          {
            "name": "confidential_issue_events",
            "in": "formData",
            "description": "Event will be triggered when a confidential issue is created/updated/closed",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge_request_events",
            "in": "formData",
            "description": "Event will be triggered when a merge request is created/updated/merged",
            "required": false,
            "type": "string"
          },
          {
            "name": "note_events",
            "in": "formData",
            "description": "Event will be triggered when someone adds a comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Event will be triggered when a new tag is pushed to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "build_events",
            "in": "formData",
            "description": "Event will be triggered when a build status changes",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipeline_events",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wiki_page_events",
            "in": "formData",
            "description": "Event will be triggered when a wiki page is created/updated",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set mattermost service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/teamcity": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Set teamcity service for project",
        "description": "Set teamcity service for project",
        "operationId": "putV3ProjectsIdServicesTeamcity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "teamcity_url",
            "in": "formData",
            "description": "TeamCity root URL like https://teamcity.example.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_type",
            "in": "formData",
            "description": "Build configuration ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "A user with permissions to trigger a manual build",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Event will be triggered by a push to the repository",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Set teamcity service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/{service_slug}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the service settings for project",
        "description": "Get the service settings for project",
        "operationId": "getV3ProjectsIdServicesServiceSlug",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service_slug",
            "in": "path",
            "description": "The name of the service",
            "required": true,
            "type": "string",
            "enum": [
              "asana",
              "assembla",
              "bamboo",
              "bugzilla",
              "buildkite",
              "builds-email",
              "campfire",
              "custom-issue-tracker",
              "drone-ci",
              "emails-on-push",
              "external-wiki",
              "flowdock",
              "gemnasium",
              "hipchat",
              "irker",
              "jira",
              "kubernetes",
              "mattermost-slash-commands",
              "slack-slash-commands",
              "pipelines-email",
              "pivotaltracker",
              "pushover",
              "redmine",
              "slack",
              "mattermost",
              "teamcity"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the service settings for project",
            "schema": {
              "$ref": "#/definitions/ProjectService"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a service for project",
        "description": "Delete a service for project",
        "operationId": "deleteV3ProjectsIdServicesServiceSlug",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service_slug",
            "in": "path",
            "description": "The name of the service",
            "required": true,
            "type": "string",
            "enum": [
              "asana",
              "assembla",
              "bamboo",
              "bugzilla",
              "buildkite",
              "builds-email",
              "campfire",
              "custom-issue-tracker",
              "drone-ci",
              "emails-on-push",
              "external-wiki",
              "flowdock",
              "gemnasium",
              "hipchat",
              "irker",
              "jira",
              "kubernetes",
              "mattermost-slash-commands",
              "slack-slash-commands",
              "pipelines-email",
              "pivotaltracker",
              "pushover",
              "redmine",
              "slack",
              "mattermost",
              "teamcity"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a service for project"
          }
        }
      }
    },
    "/v3/projects/{id}/services/mattermost_slash_commands/trigger": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Trigger a slash command for mattermost-slash-commands",
        "description": "Added in GitLab 8.13",
        "operationId": "postV3ProjectsIdServicesMattermostSlashCommandsTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "The Mattermost token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for mattermost-slash-commands"
          }
        }
      }
    },
    "/v3/projects/{id}/services/slack_slash_commands/trigger": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Trigger a slash command for slack-slash-commands",
        "description": "Added in GitLab 8.13",
        "operationId": "postV3ProjectsIdServicesSlackSlashCommandsTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "The Slack token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for slack-slash-commands"
          }
        }
      }
    },
    "/v3/projects/{id}/merge_request/{subscribable_id}/subscription": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Subscribe to a resource",
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdMergeRequestSubscribableIdSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Unsubscribe from a resource",
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdMergeRequestSubscribableIdSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{subscribable_id}/subscription": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Subscribe to a resource",
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdMergeRequestsSubscribableIdSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Unsubscribe from a resource",
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "schema": {
              "$ref": "#/definitions/MergeRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{subscribable_id}/subscription": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Subscribe to a resource",
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdIssuesSubscribableIdSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Unsubscribe from a resource",
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdIssuesSubscribableIdSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/labels/{subscribable_id}/subscription": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Subscribe to a resource",
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdLabelsSubscribableIdSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Unsubscribe from a resource",
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdLabelsSubscribableIdSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscribable_id",
            "in": "path",
            "description": "The ID of a resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/tags": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a project repository tags",
        "description": "Get a project repository tags",
        "operationId": "getV3ProjectsIdRepositoryTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository tags",
            "schema": {
              "$ref": "#/definitions/RepoTag"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new repository tag",
        "description": "Create a new repository tag",
        "operationId": "postV3ProjectsIdRepositoryTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag_name",
            "in": "formData",
            "description": "The name of the tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "The commit sha or branch name",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Specifying a message creates an annotated tag",
            "required": false,
            "type": "string"
          },
          {
            "name": "release_description",
            "in": "formData",
            "description": "Specifying release notes stored in the GitLab database",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new repository tag",
            "schema": {
              "$ref": "#/definitions/RepoTag"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/repository/tags/{tag_name}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a single repository tag",
        "description": "Get a single repository tag",
        "operationId": "getV3ProjectsIdRepositoryTagsTagName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag_name",
            "in": "path",
            "description": "The name of the tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single repository tag",
            "schema": {
              "$ref": "#/definitions/RepoTag"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a repository tag",
        "description": "Delete a repository tag",
        "operationId": "deleteV3ProjectsIdRepositoryTagsTagName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag_name",
            "in": "path",
            "description": "The name of the tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a repository tag"
          }
        }
      }
    },
    "/v3/projects/{id}/repository/tags/{tag_name}/release": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add a release note to a tag",
        "description": "Add a release note to a tag",
        "operationId": "postV3ProjectsIdRepositoryTagsTagNameRelease",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag_name",
            "in": "path",
            "description": "The name of the tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Release notes with markdown support",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add a release note to a tag",
            "schema": {
              "$ref": "#/definitions/Release"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a tag's release note",
        "description": "Update a tag's release note",
        "operationId": "putV3ProjectsIdRepositoryTagsTagNameRelease",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag_name",
            "in": "path",
            "description": "The name of the tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Release notes with markdown support",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update a tag's release note",
            "schema": {
              "$ref": "#/definitions/Release"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/todo": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a todo on an issuable",
        "description": "Create a todo on an issuable",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdTodo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "merge_request_id",
            "in": "path",
            "description": "The ID of an issuable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a todo on an issuable",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/todo": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a todo on an issuable",
        "description": "Create a todo on an issuable",
        "operationId": "postV3ProjectsIdIssuesIssueIdTodo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "issue_id",
            "in": "path",
            "description": "The ID of an issuable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a todo on an issuable",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/(ref/{ref}/)trigger/builds": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Trigger a GitLab project build",
        "description": "Trigger a GitLab project build",
        "operationId": "postV3ProjectsId(refRef)triggerBuilds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "path",
            "description": "The commit sha or name of a branch or tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "The unique token of trigger",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a GitLab project build",
            "schema": {
              "$ref": "#/definitions/TriggerRequest"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/triggers": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get triggers list",
        "description": "Get triggers list",
        "operationId": "getV3ProjectsIdTriggers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get triggers list",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a trigger",
        "description": "Create a trigger",
        "operationId": "postV3ProjectsIdTriggers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a trigger",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/triggers/{token}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get specific trigger of a project",
        "description": "Get specific trigger of a project",
        "operationId": "getV3ProjectsIdTriggersToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "path",
            "description": "The unique token of trigger",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get specific trigger of a project",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a trigger",
        "description": "Delete a trigger",
        "operationId": "deleteV3ProjectsIdTriggersToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "path",
            "description": "The unique token of trigger",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a trigger",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/variables": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project variables",
        "description": "Get project variables",
        "operationId": "getV3ProjectsIdVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get project variables",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new variable in a project",
        "description": "Create a new variable in a project",
        "operationId": "postV3ProjectsIdVariables",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "formData",
            "description": "The key of the variable",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "description": "The value of the variable",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new variable in a project",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/variables/{key}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific variable from a project",
        "description": "Get a specific variable from a project",
        "operationId": "getV3ProjectsIdVariablesKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the variable",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific variable from a project",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing variable from a project",
        "description": "Update an existing variable from a project",
        "operationId": "putV3ProjectsIdVariablesKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the variable",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "description": "The value of the variable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing variable from a project",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete an existing variable from a project",
        "description": "Delete an existing variable from a project",
        "operationId": "deleteV3ProjectsIdVariablesKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the variable",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an existing variable from a project",
            "schema": {
              "$ref": "#/definitions/Variable"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/boards/{board_id}/lists": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get the lists of a project board",
        "description": "Does not include `backlog` and `done` lists. This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoardsBoardIdLists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "board_id",
            "in": "path",
            "description": "The ID of a board",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the lists of a project board",
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new board list",
        "description": "This feature was introduced in 8.13",
        "operationId": "postV3ProjectsIdBoardsBoardIdLists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "board_id",
            "in": "path",
            "description": "The ID of a board",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "label_id",
            "in": "formData",
            "description": "The ID of an existing label",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new board list",
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        }
      }
    },
    "/v3/projects/{id}/boards/{board_id}/lists/{list_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a list of a project board",
        "description": "This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoardsBoardIdListsListId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "board_id",
            "in": "path",
            "description": "The ID of a board",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "list_id",
            "in": "path",
            "description": "The ID of a list",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of a project board",
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Moves a board list to a new position",
        "description": "This feature was introduced in 8.13",
        "operationId": "putV3ProjectsIdBoardsBoardIdListsListId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "board_id",
            "in": "path",
            "description": "The ID of a board",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "list_id",
            "in": "path",
            "description": "The ID of a list",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "position",
            "in": "formData",
            "description": "The position of the list",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Moves a board list to a new position",
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a board list",
        "description": "This feature was introduced in 8.13",
        "operationId": "deleteV3ProjectsIdBoardsBoardIdListsListId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a project",
            "required": true,
            "type": "string"
          },
          {
            "name": "board_id",
            "in": "path",
            "description": "The ID of a board",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "list_id",
            "in": "path",
            "description": "The ID of a board list",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a board list",
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        }
      }
    },
    "/v3/internal/allowed": {
      "post": {
        "tags": [
          "internal"
        ],
        "operationId": "postV3InternalAllowed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "created Allowed"
          }
        }
      }
    },
    "/v3/internal/lfs_authenticate": {
      "post": {
        "tags": [
          "internal"
        ],
        "operationId": "postV3InternalLfsAuthenticate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "created LfsAuthenticate"
          }
        }
      }
    },
    "/v3/internal/merge_request_urls": {
      "get": {
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalMergeRequestUrls",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "get MergeRequestUrl(s)"
          }
        }
      }
    },
    "/v3/internal/discover": {
      "get": {
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalDiscover",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "get Discover(s)"
          }
        }
      }
    },
    "/v3/internal/check": {
      "get": {
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalCheck",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "get Check(s)"
          }
        }
      }
    },
    "/v3/internal/broadcast_message": {
      "get": {
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalBroadcastMessage",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "get BroadcastMessage(s)"
          }
        }
      }
    },
    "/v3/internal/two_factor_recovery_codes": {
      "post": {
        "tags": [
          "internal"
        ],
        "operationId": "postV3InternalTwoFactorRecoveryCodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "created TwoFactorRecoveryCode"
          }
        }
      }
    },
    "/v3/issues": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "Get currently authenticated user's issues",
        "description": "Get currently authenticated user's issues",
        "operationId": "getV3Issues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Return opened, closed, or all issues",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "opened",
              "closed",
              "all"
            ]
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Comma-separated list of label names",
            "required": false,
            "type": "string"
          },
          {
            "name": "milestone",
            "in": "query",
            "description": "Return issues for a specific milestone",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "required": false,
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return issues sorted in `asc` or `desc` order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get currently authenticated user's issues",
            "schema": {
              "$ref": "#/definitions/Issue"
            }
          }
        }
      }
    },
    "/v3/keys/{id}": {
      "get": {
        "tags": [
          "keys"
        ],
        "summary": "Get single ssh key by id. Only available to admin users",
        "description": "Get single ssh key by id. Only available to admin users",
        "operationId": "getV3KeysId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get single ssh key by id. Only available to admin users",
            "schema": {
              "$ref": "#/definitions/SSHKeyWithUser"
            }
          }
        }
      }
    },
    "/v3/ci/lint": {
      "post": {
        "tags": [
          "ci"
        ],
        "summary": "Validation of .gitlab-ci.yml content",
        "description": "Validation of .gitlab-ci.yml content",
        "operationId": "postV3CiLint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "formData",
            "description": "Content of .gitlab-ci.yml",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Validation of .gitlab-ci.yml content"
          }
        }
      }
    },
    "/v3/namespaces": {
      "get": {
        "tags": [
          "namespaces"
        ],
        "summary": "Get a namespaces list",
        "description": "Get a namespaces list",
        "operationId": "getV3Namespaces",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search query for namespaces",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a namespaces list",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          }
        }
      }
    },
    "/v3/notification_settings": {
      "get": {
        "tags": [
          "notification_settings"
        ],
        "summary": "Get global notification level settings and email, defaults to Participate",
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3NotificationSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get global notification level settings and email, defaults to Participate",
            "schema": {
              "$ref": "#/definitions/GlobalNotificationSetting"
            }
          }
        }
      },
      "put": {
        "tags": [
          "notification_settings"
        ],
        "summary": "Update global notification level settings and email, defaults to Participate",
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3NotificationSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "level",
            "in": "formData",
            "description": "The global notification level",
            "required": false,
            "type": "string"
          },
          {
            "name": "notification_email",
            "in": "formData",
            "description": "The email address to send notifications",
            "required": false,
            "type": "string"
          },
          {
            "name": "new_note",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "new_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reopen_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "close_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reassign_issue",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "new_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reopen_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "close_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "reassign_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge_merge_request",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "failed_pipeline",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "success_pipeline",
            "in": "formData",
            "description": "Enable/disable this notification",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update global notification level settings and email, defaults to Participate",
            "schema": {
              "$ref": "#/definitions/GlobalNotificationSetting"
            }
          }
        }
      }
    },
    "/v3/runners": {
      "get": {
        "tags": [
          "runners"
        ],
        "summary": "Get runners available for user",
        "description": "Get runners available for user",
        "operationId": "getV3Runners",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of specific runners to show",
            "required": false,
            "type": "string",
            "enum": [
              "active",
              "paused",
              "online"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get runners available for user",
            "schema": {
              "$ref": "#/definitions/Runner"
            }
          }
        }
      }
    },
    "/v3/runners/all": {
      "get": {
        "tags": [
          "runners"
        ],
        "summary": "Get all runners - shared and specific",
        "description": "Get all runners - shared and specific",
        "operationId": "getV3RunnersAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of specific runners to show",
            "required": false,
            "type": "string",
            "enum": [
              "active",
              "paused",
              "online",
              "specific",
              "shared"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all runners - shared and specific",
            "schema": {
              "$ref": "#/definitions/Runner"
            }
          }
        }
      }
    },
    "/v3/runners/{id}": {
      "get": {
        "tags": [
          "runners"
        ],
        "summary": "Get runner's details",
        "description": "Get runner's details",
        "operationId": "getV3RunnersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the runner",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get runner's details",
            "schema": {
              "$ref": "#/definitions/RunnerDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "runners"
        ],
        "summary": "Update runner's details",
        "description": "Update runner's details",
        "operationId": "putV3RunnersId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the runner",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description of the runner",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "formData",
            "description": "The state of a runner",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tag_list",
            "in": "formData",
            "description": "The list of tags for a runner",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "run_untagged",
            "in": "formData",
            "description": "Flag indicating the runner can execute untagged jobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "locked",
            "in": "formData",
            "description": "Flag indicating the runner is locked",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update runner's details",
            "schema": {
              "$ref": "#/definitions/RunnerDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "runners"
        ],
        "summary": "Remove a runner",
        "description": "Remove a runner",
        "operationId": "deleteV3RunnersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the runner",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Remove a runner",
            "schema": {
              "$ref": "#/definitions/Runner"
            }
          }
        }
      }
    },
    "/v3/snippets": {
      "get": {
        "tags": [
          "snippets"
        ],
        "summary": "Get a snippets list for authenticated user",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3Snippets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a snippets list for authenticated user",
            "schema": {
              "$ref": "#/definitions/PersonalSnippet"
            }
          }
        }
      },
      "post": {
        "tags": [
          "snippets"
        ],
        "summary": "Create new snippet",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "postV3Snippets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "The title of a snippet",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_name",
            "in": "formData",
            "description": "The name of a snippet file",
            "required": true,
            "type": "string"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "The content of a snippet",
            "required": true,
            "type": "string"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "The visibility level of the snippet",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Create new snippet",
            "schema": {
              "$ref": "#/definitions/PersonalSnippet"
            }
          }
        }
      }
    },
    "/v3/snippets/public": {
      "get": {
        "tags": [
          "snippets"
        ],
        "summary": "List all public snippets current_user has access to",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsPublic",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List all public snippets current_user has access to",
            "schema": {
              "$ref": "#/definitions/PersonalSnippet"
            }
          }
        }
      }
    },
    "/v3/snippets/{id}": {
      "get": {
        "tags": [
          "snippets"
        ],
        "summary": "Get a single snippet",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single snippet",
            "schema": {
              "$ref": "#/definitions/PersonalSnippet"
            }
          }
        }
      },
      "put": {
        "tags": [
          "snippets"
        ],
        "summary": "Update an existing snippet",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "putV3SnippetsId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of a snippet",
            "required": false,
            "type": "string"
          },
          {
            "name": "file_name",
            "in": "formData",
            "description": "The name of a snippet file",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "The content of a snippet",
            "required": false,
            "type": "string"
          },
          {
            "name": "visibility_level",
            "in": "formData",
            "description": "The visibility level of the snippet",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing snippet",
            "schema": {
              "$ref": "#/definitions/PersonalSnippet"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "snippets"
        ],
        "summary": "Remove snippet",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "deleteV3SnippetsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Remove snippet",
            "schema": {
              "$ref": "#/definitions/PersonalSnippet"
            }
          }
        }
      }
    },
    "/v3/snippets/{id}/raw": {
      "get": {
        "tags": [
          "snippets"
        ],
        "summary": "Get a raw snippet",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsIdRaw",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a snippet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw snippet"
          }
        }
      }
    },
    "/v3/hooks": {
      "get": {
        "tags": [
          "hooks"
        ],
        "summary": "Get the list of system hooks",
        "description": "Get the list of system hooks",
        "operationId": "getV3Hooks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of system hooks",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          }
        }
      },
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Create a new system hook",
        "description": "Create a new system hook",
        "operationId": "postV3Hooks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "formData",
            "description": "The URL to send the request to",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "The token used to validate payloads",
            "required": false,
            "type": "string"
          },
          {
            "name": "push_events",
            "in": "formData",
            "description": "Trigger hook on push events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tag_push_events",
            "in": "formData",
            "description": "Trigger hook on tag push events",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable_ssl_verification",
            "in": "formData",
            "description": "Do SSL verification when triggering the hook",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a new system hook",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          }
        }
      }
    },
    "/v3/hooks/{id}": {
      "get": {
        "tags": [
          "hooks"
        ],
        "summary": "Test a hook",
        "description": "Test a hook",
        "operationId": "getV3HooksId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the system hook",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Test a hook",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "hooks"
        ],
        "summary": "Delete a hook",
        "description": "Delete a hook",
        "operationId": "deleteV3HooksId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the system hook",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a hook",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          }
        }
      }
    },
    "/v3/todos": {
      "get": {
        "tags": [
          "todos"
        ],
        "summary": "Get a todo list",
        "description": "Get a todo list",
        "operationId": "getV3Todos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a todo list",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "todos"
        ],
        "summary": "Mark all todos as done",
        "description": "Mark all todos as done",
        "operationId": "deleteV3Todos",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Mark all todos as done"
          }
        }
      }
    },
    "/v3/todos/{id}": {
      "delete": {
        "tags": [
          "todos"
        ],
        "summary": "Mark a todo as done",
        "description": "Mark a todo as done",
        "operationId": "deleteV3TodosId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the todo being marked as done",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Mark a todo as done",
            "schema": {
              "$ref": "#/definitions/Todo"
            }
          }
        }
      }
    },
    "/v3/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the list of users",
        "description": "Get the list of users",
        "operationId": "getV3Users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Get a single user with a specific username",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search for a username",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filters only active users",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "external",
            "in": "query",
            "description": "Filters only external users",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "blocked",
            "in": "query",
            "description": "Filters only blocked users",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of users",
            "schema": {
              "$ref": "#/definitions/UserBasic"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user. Available only for admins.",
        "description": "Create a user. Available only for admins.",
        "operationId": "postV3Users",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "The email of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password of the new user",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "The username of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "skype",
            "in": "formData",
            "description": "The Skype username",
            "required": false,
            "type": "string"
          },
          {
            "name": "linkedin",
            "in": "formData",
            "description": "The LinkedIn username",
            "required": false,
            "type": "string"
          },
          {
            "name": "twitter",
            "in": "formData",
            "description": "The Twitter username",
            "required": false,
            "type": "string"
          },
          {
            "name": "website_url",
            "in": "formData",
            "description": "The website of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "formData",
            "description": "The organization of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "projects_limit",
            "in": "formData",
            "description": "The number of projects a user can create",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "extern_uid",
            "in": "formData",
            "description": "The external authentication provider UID",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider",
            "in": "formData",
            "description": "The external provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "bio",
            "in": "formData",
            "description": "The biography of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "formData",
            "description": "The location of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "admin",
            "in": "formData",
            "description": "Flag indicating the user is an administrator",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "can_create_group",
            "in": "formData",
            "description": "Flag indicating the user can create groups",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "confirm",
            "in": "formData",
            "description": "Flag indicating the account needs to be confirmed",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "external",
            "in": "formData",
            "description": "Flag indicating the user is an external user",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Create a user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/UserPublic"
            }
          }
        }
      }
    },
    "/v3/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a single user",
        "description": "Get a single user",
        "operationId": "getV3UsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single user",
            "schema": {
              "$ref": "#/definitions/UserBasic"
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a user. Available only for admins.",
        "description": "Update a user. Available only for admins.",
        "operationId": "putV3UsersId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "The email of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password of the new user",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "The username of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "skype",
            "in": "formData",
            "description": "The Skype username",
            "required": false,
            "type": "string"
          },
          {
            "name": "linkedin",
            "in": "formData",
            "description": "The LinkedIn username",
            "required": false,
            "type": "string"
          },
          {
            "name": "twitter",
            "in": "formData",
            "description": "The Twitter username",
            "required": false,
            "type": "string"
          },
          {
            "name": "website_url",
            "in": "formData",
            "description": "The website of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "formData",
            "description": "The organization of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "projects_limit",
            "in": "formData",
            "description": "The number of projects a user can create",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "extern_uid",
            "in": "formData",
            "description": "The external authentication provider UID",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider",
            "in": "formData",
            "description": "The external provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "bio",
            "in": "formData",
            "description": "The biography of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "formData",
            "description": "The location of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "admin",
            "in": "formData",
            "description": "Flag indicating the user is an administrator",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "can_create_group",
            "in": "formData",
            "description": "Flag indicating the user can create groups",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "confirm",
            "in": "formData",
            "description": "Flag indicating the account needs to be confirmed",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "external",
            "in": "formData",
            "description": "Flag indicating the user is an external user",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Update a user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/UserPublic"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user. Available only for admins.",
        "description": "Delete a user. Available only for admins.",
        "operationId": "deleteV3UsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/v3/users/{id}/keys": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the SSH keys of a specified user. Available only for admins.",
        "description": "Get the SSH keys of a specified user. Available only for admins.",
        "operationId": "getV3UsersIdKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the SSH keys of a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add an SSH key to a specified user. Available only for admins.",
        "description": "Add an SSH key to a specified user. Available only for admins.",
        "operationId": "postV3UsersIdKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "key",
            "in": "formData",
            "description": "The new SSH key",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the new SSH key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add an SSH key to a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/users/{id}/keys/{key_id}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete an existing SSH key from a specified user. Available only for admins.",
        "description": "Delete an existing SSH key from a specified user. Available only for admins.",
        "operationId": "deleteV3UsersIdKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the SSH key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an existing SSH key from a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/users/{id}/emails": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the emails addresses of a specified user. Available only for admins.",
        "description": "Get the emails addresses of a specified user. Available only for admins.",
        "operationId": "getV3UsersIdEmails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the emails addresses of a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add an email address to a specified user. Available only for admins.",
        "description": "Add an email address to a specified user. Available only for admins.",
        "operationId": "postV3UsersIdEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "The email of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add an email address to a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/v3/users/{id}/emails/{email_id}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete an email address of a specified user. Available only for admins.",
        "description": "Delete an email address of a specified user. Available only for admins.",
        "operationId": "deleteV3UsersIdEmailsEmailId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email_id",
            "in": "path",
            "description": "The ID of the email",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an email address of a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/v3/users/{id}/block": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Block a user. Available only for admins.",
        "description": "Block a user. Available only for admins.",
        "operationId": "putV3UsersIdBlock",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Block a user. Available only for admins."
          }
        }
      }
    },
    "/v3/users/{id}/unblock": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Unblock a user. Available only for admins.",
        "description": "Unblock a user. Available only for admins.",
        "operationId": "putV3UsersIdUnblock",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Unblock a user. Available only for admins."
          }
        }
      }
    },
    "/v3/users/{id}/events": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the contribution events of a specified user",
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "getV3UsersIdEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the contribution events of a specified user",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/v3/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the currently authenticated user",
        "description": "Get the currently authenticated user",
        "operationId": "getV3User",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the currently authenticated user",
            "schema": {
              "$ref": "#/definitions/UserPublic"
            }
          }
        }
      }
    },
    "/v3/user/keys": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the currently authenticated user's SSH keys",
        "description": "Get the currently authenticated user's SSH keys",
        "operationId": "getV3UserKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's SSH keys",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new SSH key to the currently authenticated user",
        "description": "Add a new SSH key to the currently authenticated user",
        "operationId": "postV3UserKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "formData",
            "description": "The new SSH key",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "The title of the new SSH key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add a new SSH key to the currently authenticated user",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/user/keys/{key_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a single key owned by currently authenticated user",
        "description": "Get a single key owned by currently authenticated user",
        "operationId": "getV3UserKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the SSH key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single key owned by currently authenticated user",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete an SSH key from the currently authenticated user",
        "description": "Delete an SSH key from the currently authenticated user",
        "operationId": "deleteV3UserKeysKeyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "The ID of the SSH key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an SSH key from the currently authenticated user",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/v3/user/emails": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the currently authenticated user's email addresses",
        "description": "Get the currently authenticated user's email addresses",
        "operationId": "getV3UserEmails",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's email addresses",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add new email address to the currently authenticated user",
        "description": "Add new email address to the currently authenticated user",
        "operationId": "postV3UserEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "The new email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Add new email address to the currently authenticated user",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/v3/user/emails/{email_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a single email address owned by the currently authenticated user",
        "description": "Get a single email address owned by the currently authenticated user",
        "operationId": "getV3UserEmailsEmailId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email_id",
            "in": "path",
            "description": "The ID of the email",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single email address owned by the currently authenticated user",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete an email address from the currently authenticated user",
        "description": "Delete an email address from the currently authenticated user",
        "operationId": "deleteV3UserEmailsEmailId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email_id",
            "in": "path",
            "description": "The ID of the email",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an email address from the currently authenticated user"
          }
        }
      }
    },
    "/v3/deploy_keys": {
      "get": {
        "tags": [
          "deploy_keys"
        ],
        "operationId": "getV3DeployKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "get DeployKey(s)"
          }
        }
      }
    },
    "/v3/session": {
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Login to get token",
        "description": "Login to get token",
        "operationId": "postV3Session",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "login",
            "in": "formData",
            "description": "The username",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "The email of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Login to get token",
            "schema": {
              "$ref": "#/definitions/UserWithPrivateToken"
            }
          }
        }
      }
    },
    "/v3/application/settings": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Get the current application settings",
        "description": "Get the current application settings",
        "operationId": "getV3ApplicationSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the current application settings",
            "schema": {
              "$ref": "#/definitions/ApplicationSetting"
            }
          }
        }
      },
      "put": {
        "tags": [
          "application"
        ],
        "summary": "Modify application settings",
        "description": "Modify application settings",
        "operationId": "putV3ApplicationSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "default_branch_protection",
            "in": "formData",
            "description": "Determine if developers can push to master",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ]
          },
          {
            "name": "default_project_visibility",
            "in": "formData",
            "description": "The default project visibility",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          },
          {
            "name": "default_snippet_visibility",
            "in": "formData",
            "description": "The default snippet visibility",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          },
          {
            "name": "default_group_visibility",
            "in": "formData",
            "description": "The default group visibility",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ]
          },
          {
            "name": "restricted_visibility_levels",
            "in": "formData",
            "description": "Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "import_sources",
            "in": "formData",
            "description": "Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "github",
              "bitbucket",
              "gitlab",
              "google_code",
              "fogbugz",
              "git",
              "gitlab_project"
            ]
          },
          {
            "name": "disabled_oauth_sign_in_sources",
            "in": "formData",
            "description": "Disable certain OAuth sign-in sources",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled_git_access_protocol",
            "in": "formData",
            "description": "Allow only the selected protocols to be used for Git access.",
            "required": false,
            "type": "string",
            "enum": [
              "ssh",
              "http",
              "nil"
            ]
          },
          {
            "name": "gravatar_enabled",
            "in": "formData",
            "description": "Flag indicating if the Gravatar service is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default_projects_limit",
            "in": "formData",
            "description": "The maximum number of personal projects",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "max_attachment_size",
            "in": "formData",
            "description": "Maximum attachment size in MB",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "session_expire_delay",
            "in": "formData",
            "description": "Session duration in minutes. GitLab restart is required to apply changes.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "user_oauth_applications",
            "in": "formData",
            "description": "Allow users to register any application to use GitLab as an OAuth provider",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "user_default_external",
            "in": "formData",
            "description": "Newly registered users will by default be external",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "signup_enabled",
            "in": "formData",
            "description": "Flag indicating if sign up is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "send_user_confirmation_email",
            "in": "formData",
            "description": "Send confirmation email on sign-up",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain_whitelist",
            "in": "formData",
            "description": "ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain_blacklist_enabled",
            "in": "formData",
            "description": "Enable domain blacklist for sign ups",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain_blacklist",
            "in": "formData",
            "description": "Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "after_sign_up_text",
            "in": "formData",
            "description": "Text shown after sign up",
            "required": false,
            "type": "string"
          },
          {
            "name": "signin_enabled",
            "in": "formData",
            "description": "Flag indicating if sign in is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "require_two_factor_authentication",
            "in": "formData",
            "description": "Require all users to setup Two-factor authentication",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "two_factor_grace_period",
            "in": "formData",
            "description": "Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "home_page_url",
            "in": "formData",
            "description": "We will redirect non-logged in users to this page",
            "required": false,
            "type": "string"
          },
          {
            "name": "after_sign_out_path",
            "in": "formData",
            "description": "We will redirect users to this page after they sign out",
            "required": false,
            "type": "string"
          },
          {
            "name": "sign_in_text",
            "in": "formData",
            "description": "The sign in text of the GitLab application",
            "required": false,
            "type": "string"
          },
          {
            "name": "help_page_text",
            "in": "formData",
            "description": "Custom text displayed on the help page",
            "required": false,
            "type": "string"
          },
          {
            "name": "shared_runners_enabled",
            "in": "formData",
            "description": "Enable shared runners for new projects",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "shared_runners_text",
            "in": "formData",
            "description": "Shared runners text ",
            "required": true,
            "type": "string"
          },
          {
            "name": "max_artifacts_size",
            "in": "formData",
            "description": "Set the maximum file size each build's artifacts can have",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "container_registry_token_expire_delay",
            "in": "formData",
            "description": "Authorization token duration (minutes)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metrics_enabled",
            "in": "formData",
            "description": "Enable the InfluxDB metrics",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "metrics_host",
            "in": "formData",
            "description": "The InfluxDB host",
            "required": true,
            "type": "string"
          },
          {
            "name": "metrics_port",
            "in": "formData",
            "description": "The UDP port to use for connecting to InfluxDB",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metrics_pool_size",
            "in": "formData",
            "description": "The amount of InfluxDB connections to open",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metrics_timeout",
            "in": "formData",
            "description": "The amount of seconds after which an InfluxDB connection will time out",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metrics_method_call_threshold",
            "in": "formData",
            "description": "A method call is only tracked when it takes longer to complete than the given amount of milliseconds.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metrics_sample_interval",
            "in": "formData",
            "description": "The sampling interval in seconds",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metrics_packet_size",
            "in": "formData",
            "description": "The amount of points to store in a single UDP packet",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sidekiq_throttling_enabled",
            "in": "formData",
            "description": "Enable Sidekiq Job Throttling",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sidekiq_throttling_queus",
            "in": "formData",
            "description": "Choose which queues you wish to throttle",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sidekiq_throttling_factor",
            "in": "formData",
            "description": "The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.",
            "required": true,
            "type": "number",
            "format": "float"
          },
          {
            "name": "recaptcha_enabled",
            "in": "formData",
            "description": "Helps prevent bots from creating accounts",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "recaptcha_site_key",
            "in": "formData",
            "description": "Generate site key at http://www.google.com/recaptcha",
            "required": true,
            "type": "string"
          },
          {
            "name": "recaptcha_private_key",
            "in": "formData",
            "description": "Generate private key at http://www.google.com/recaptcha",
            "required": true,
            "type": "string"
          },
          {
            "name": "akismet_enabled",
            "in": "formData",
            "description": "Helps prevent bots from creating issues",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "akismet_api_key",
            "in": "formData",
            "description": "Generate API key at http://www.akismet.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "admin_notification_email",
            "in": "formData",
            "description": "Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sentry_enabled",
            "in": "formData",
            "description": "Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sentry_dsn",
            "in": "formData",
            "description": "Sentry Data Source Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "repository_storage",
            "in": "formData",
            "description": "Storage paths for new projects",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository_checks_enabled",
            "in": "formData",
            "description": "GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "koding_enabled",
            "in": "formData",
            "description": "Enable Koding",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "koding_url",
            "in": "formData",
            "description": "The Koding team URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "plantuml_enabled",
            "in": "formData",
            "description": "Enable PlantUML",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "plantuml_url",
            "in": "formData",
            "description": "The PlantUML server URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_check_enabled",
            "in": "formData",
            "description": "Let GitLab inform you when an update is available.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "email_author_in_body",
            "in": "formData",
            "description": "Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "html_emails_enabled",
            "in": "formData",
            "description": "By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "housekeeping_enabled",
            "in": "formData",
            "description": "Enable automatic repository housekeeping (git repack, git gc)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "housekeeping_bitmaps_enabled",
            "in": "formData",
            "description": "Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance.",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "housekeeping_incremental_repack_period",
            "in": "formData",
            "description": "Number of Git pushes after which an incremental 'git repack' is run.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "housekeeping_full_repack_period",
            "in": "formData",
            "description": "Number of Git pushes after which a full 'git repack' is run.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "housekeeping_gc_period",
            "in": "formData",
            "description": "Number of Git pushes after which 'git gc' is run.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Modify application settings",
            "schema": {
              "$ref": "#/definitions/ApplicationSetting"
            }
          }
        }
      }
    },
    "/v3/sidekiq/queue_metrics": {
      "get": {
        "tags": [
          "sidekiq"
        ],
        "summary": "Get the Sidekiq queue metrics",
        "description": "Get the Sidekiq queue metrics",
        "operationId": "getV3SidekiqQueueMetrics",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the Sidekiq queue metrics"
          }
        }
      }
    },
    "/v3/sidekiq/process_metrics": {
      "get": {
        "tags": [
          "sidekiq"
        ],
        "summary": "Get the Sidekiq process metrics",
        "description": "Get the Sidekiq process metrics",
        "operationId": "getV3SidekiqProcessMetrics",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the Sidekiq process metrics"
          }
        }
      }
    },
    "/v3/sidekiq/job_stats": {
      "get": {
        "tags": [
          "sidekiq"
        ],
        "summary": "Get the Sidekiq job statistics",
        "description": "Get the Sidekiq job statistics",
        "operationId": "getV3SidekiqJobStats",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the Sidekiq job statistics"
          }
        }
      }
    },
    "/v3/sidekiq/compound_metrics": {
      "get": {
        "tags": [
          "sidekiq"
        ],
        "summary": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics",
        "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics",
        "operationId": "getV3SidekiqCompoundMetrics",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics"
          }
        }
      }
    },
    "/v3/licenses": {
      "get": {
        "tags": [
          "licenses"
        ],
        "summary": "Get the list of the available license template",
        "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Licenses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "popular",
            "in": "query",
            "description": "If passed, returns only popular licenses",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of the available license template",
            "schema": {
              "$ref": "#/definitions/RepoLicense"
            }
          }
        }
      }
    },
    "/v3/licenses/{name}": {
      "get": {
        "tags": [
          "licenses"
        ],
        "summary": "Get the text for a specific license",
        "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3LicensesName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific license",
            "schema": {
              "$ref": "#/definitions/RepoLicense"
            }
          }
        }
      }
    },
    "/v3/templates/licenses": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the list of the available license template",
        "description": "This feature was introduced in GitLab 8.7.",
        "operationId": "getV3TemplatesLicenses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "popular",
            "in": "query",
            "description": "If passed, returns only popular licenses",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of the available license template",
            "schema": {
              "$ref": "#/definitions/RepoLicense"
            }
          }
        }
      }
    },
    "/v3/templates/licenses/{name}": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the text for a specific license",
        "description": "This feature was introduced in GitLab 8.7.",
        "operationId": "getV3TemplatesLicensesName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific license",
            "schema": {
              "$ref": "#/definitions/RepoLicense"
            }
          }
        }
      }
    },
    "/v3/templates/gitignores": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the list of the available template",
        "description": "This feature was introduced in GitLab 8.8.",
        "operationId": "getV3TemplatesGitignores",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "schema": {
              "$ref": "#/definitions/TemplatesList"
            }
          }
        }
      }
    },
    "/v3/templates/gitignores/{name}": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the text for a specific template present in local filesystem",
        "description": "This feature was introduced in GitLab 8.8.",
        "operationId": "getV3TemplatesGitignoresName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    "/v3/templates/gitlab_ci_ymls": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the list of the available template",
        "description": "This feature was introduced in GitLab 8.9.",
        "operationId": "getV3TemplatesGitlabCiYmls",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "schema": {
              "$ref": "#/definitions/TemplatesList"
            }
          }
        }
      }
    },
    "/v3/templates/gitlab_ci_ymls/{name}": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the text for a specific template present in local filesystem",
        "description": "This feature was introduced in GitLab 8.9.",
        "operationId": "getV3TemplatesGitlabCiYmlsName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    "/v3/templates/dockerfiles": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the list of the available template",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3TemplatesDockerfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "schema": {
              "$ref": "#/definitions/TemplatesList"
            }
          }
        }
      }
    },
    "/v3/templates/dockerfiles/{name}": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the text for a specific template present in local filesystem",
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3TemplatesDockerfilesName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    "/v3/gitignores": {
      "get": {
        "tags": [
          "gitignores"
        ],
        "summary": "Get the list of the available template",
        "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Gitignores",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "schema": {
              "$ref": "#/definitions/TemplatesList"
            }
          }
        }
      }
    },
    "/v3/gitignores/{name}": {
      "get": {
        "tags": [
          "gitignores"
        ],
        "summary": "Get the text for a specific template present in local filesystem",
        "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitignoresName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    "/v3/gitlab_ci_ymls": {
      "get": {
        "tags": [
          "gitlab_ci_ymls"
        ],
        "summary": "Get the list of the available template",
        "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitlabCiYmls",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "schema": {
              "$ref": "#/definitions/TemplatesList"
            }
          }
        }
      }
    },
    "/v3/gitlab_ci_ymls/{name}": {
      "get": {
        "tags": [
          "gitlab_ci_ymls"
        ],
        "summary": "Get the text for a specific template present in local filesystem",
        "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitlabCiYmlsName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    "/v3/dockerfiles": {
      "get": {
        "tags": [
          "dockerfiles"
        ],
        "summary": "Get the list of the available template",
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Dockerfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "schema": {
              "$ref": "#/definitions/TemplatesList"
            }
          }
        }
      }
    },
    "/v3/dockerfiles/{name}": {
      "get": {
        "tags": [
          "dockerfiles"
        ],
        "summary": "Get the text for a specific template present in local filesystem",
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3DockerfilesName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    "/v3/version": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get the version information of the GitLab instance.",
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "getV3Version",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the version information of the GitLab instance."
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "private_token_header": {
      "type": "apiKey",
      "name": "PRIVATE_HEADER",
      "in": "header"
    },
    "private_token_query": {
      "type": "apiKey",
      "name": "private_token",
      "in": "query"
    }
  },
  "definitions": {
    "AccessRequester": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "requested_at": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.11."
    },
    "Member": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "access_level": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        }
      },
      "description": "Updates a member of a group or project."
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "statistics": {
          "type": "string"
        }
      },
      "description": "Update a group. Available only for users who can administrate groups."
    },
    "GroupDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "statistics": {
          "type": "string"
        },
        "projects": {
          "$ref": "#/definitions/Project"
        },
        "shared_projects": {
          "$ref": "#/definitions/Project"
        }
      },
      "description": "Transfer a project to the group namespace. Available only for admin."
    },
    "Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "tag_list": {
          "type": "string"
        },
        "public": {
          "type": "string"
        },
        "archived": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "ssh_url_to_repo": {
          "type": "string"
        },
        "http_url_to_repo": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/UserBasic"
        },
        "name": {
          "type": "string"
        },
        "name_with_namespace": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "path_with_namespace": {
          "type": "string"
        },
        "container_registry_enabled": {
          "type": "string"
        },
        "issues_enabled": {
          "type": "string"
        },
        "merge_requests_enabled": {
          "type": "string"
        },
        "wiki_enabled": {
          "type": "string"
        },
        "builds_enabled": {
          "type": "string"
        },
        "snippets_enabled": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "last_activity_at": {
          "type": "string"
        },
        "shared_runners_enabled": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "creator_id": {
          "type": "string"
        },
        "namespace": {
          "$ref": "#/definitions/Namespace"
        },
        "forked_from_project": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "avatar_url": {
          "type": "string"
        },
        "star_count": {
          "type": "string"
        },
        "forks_count": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "string"
        },
        "runners_token": {
          "type": "string"
        },
        "public_builds": {
          "type": "string"
        },
        "shared_with_groups": {
          "type": "string"
        },
        "only_allow_merge_if_build_succeeds": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "only_allow_merge_if_all_discussions_are_resolved": {
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/ProjectStatistics"
        }
      },
      "description": "Unstar a project"
    },
    "UserBasic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "description": "Get a single user"
    },
    "Namespace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      },
      "description": "Get a namespaces list"
    },
    "BasicProjectDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "http_url_to_repo": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "name_with_namespace": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "path_with_namespace": {
          "type": "string"
        }
      },
      "description": "Get all projects for admin user"
    },
    "ProjectStatistics": {
      "type": "object",
      "properties": {
        "commit_count": {
          "type": "string"
        },
        "storage_size": {
          "type": "string"
        },
        "repository_size": {
          "type": "string"
        },
        "lfs_objects_size": {
          "type": "string"
        },
        "build_artifacts_size": {
          "type": "string"
        }
      }
    },
    "Issue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "labels": {
          "type": "string"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "assignee": {
          "$ref": "#/definitions/UserBasic"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "subscribed": {
          "type": "string"
        },
        "user_notes_count": {
          "type": "string"
        },
        "upvotes": {
          "type": "string"
        },
        "downvotes": {
          "type": "string"
        },
        "due_date": {
          "type": "string"
        },
        "confidential": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "description": "Get currently authenticated user's issues"
    },
    "Milestone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "due_date": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        }
      },
      "description": "Update an existing project milestone"
    },
    "NotificationSetting": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "events": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.12"
    },
    "AwardEmoji": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "awardable_id": {
          "type": "string"
        },
        "awardable_type": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in 8.9"
    },
    "Board": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "lists": {
          "$ref": "#/definitions/List"
        }
      },
      "description": "This feature was introduced in 8.13"
    },
    "List": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LabelBasic"
        },
        "position": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in 8.13"
    },
    "LabelBasic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "RepoBranch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "merged": {
          "type": "string"
        },
        "protected": {
          "type": "string"
        },
        "developers_can_push": {
          "type": "string"
        },
        "developers_can_merge": {
          "type": "string"
        }
      },
      "description": "Create branch"
    },
    "Build": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "coverage": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "artifacts_file": {
          "$ref": "#/definitions/BuildArtifactFile"
        },
        "commit": {
          "$ref": "#/definitions/RepoCommit"
        },
        "runner": {
          "$ref": "#/definitions/Runner"
        },
        "pipeline": {
          "$ref": "#/definitions/PipelineBasic"
        }
      },
      "description": "This feature was added in GitLab 8.11"
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "is_admin": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "website_url": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        }
      }
    },
    "BuildArtifactFile": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string"
        },
        "size": {
          "type": "string"
        }
      }
    },
    "RepoCommit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "short_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "author_name": {
          "type": "string"
        },
        "author_email": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "committer_name": {
          "type": "string"
        },
        "committer_email": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "description": "Get the commits of a merge request"
    },
    "Runner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "active": {
          "type": "string"
        },
        "is_shared": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Remove a runner"
    },
    "PipelineBasic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "RepoCommitDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "short_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "author_name": {
          "type": "string"
        },
        "author_email": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "committer_name": {
          "type": "string"
        },
        "committer_email": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "parent_ids": {
          "type": "string"
        },
        "committed_date": {
          "type": "string"
        },
        "authored_date": {
          "type": "string"
        },
        "stats": {
          "$ref": "#/definitions/RepoCommitStats"
        },
        "status": {
          "type": "string"
        }
      },
      "description": "Get a specific commit of a project"
    },
    "RepoCommitStats": {
      "type": "object",
      "properties": {
        "additions": {
          "type": "string"
        },
        "deletions": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "CommitNote": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "line": {
          "type": "string"
        },
        "line_type": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        }
      },
      "description": "Post comment to commit"
    },
    "CommitStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "target_url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "allow_failure": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        }
      },
      "description": "Post status to a commit"
    },
    "SSHKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "can_push": {
          "type": "string"
        }
      },
      "description": "Delete an SSH key from the currently authenticated user"
    },
    "Deployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserBasic"
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentBasic"
        },
        "deployable": {
          "$ref": "#/definitions/Build"
        }
      },
      "description": "This feature was introduced in GitLab 8.11."
    },
    "EnvironmentBasic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        }
      }
    },
    "Environment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "description": "This feature was introduced in GitLab 8.11."
    },
    "Label": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "string"
        },
        "closed_issues_count": {
          "type": "string"
        },
        "open_merge_requests_count": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        }
      },
      "description": "Unsubscribe from a resource"
    },
    "MergeRequestDiff": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "head_commit_sha": {
          "type": "string"
        },
        "base_commit_sha": {
          "type": "string"
        },
        "start_commit_sha": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "merge_request_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "real_size": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.12."
    },
    "MergeRequestDiffFull": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "head_commit_sha": {
          "type": "string"
        },
        "base_commit_sha": {
          "type": "string"
        },
        "start_commit_sha": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "merge_request_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "real_size": {
          "type": "string"
        },
        "commits": {
          "$ref": "#/definitions/RepoCommit"
        },
        "diffs": {
          "$ref": "#/definitions/RepoDiff"
        }
      },
      "description": "This feature was introduced in GitLab 8.12."
    },
    "RepoDiff": {
      "type": "object",
      "properties": {
        "old_path": {
          "type": "string"
        },
        "new_path": {
          "type": "string"
        },
        "a_mode": {
          "type": "string"
        },
        "b_mode": {
          "type": "string"
        },
        "diff": {
          "type": "string"
        },
        "new_file": {
          "type": "string"
        },
        "renamed_file": {
          "type": "string"
        },
        "deleted_file": {
          "type": "string"
        }
      }
    },
    "MergeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "target_branch": {
          "type": "string"
        },
        "source_branch": {
          "type": "string"
        },
        "upvotes": {
          "type": "string"
        },
        "downvotes": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "assignee": {
          "$ref": "#/definitions/UserBasic"
        },
        "source_project_id": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        },
        "labels": {
          "type": "string"
        },
        "work_in_progress": {
          "type": "string"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "merge_when_build_succeeds": {
          "type": "string"
        },
        "merge_status": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "merge_commit_sha": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        },
        "user_notes_count": {
          "type": "string"
        },
        "should_remove_source_branch": {
          "type": "string"
        },
        "force_remove_source_branch": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "description": "Unsubscribe from a resource"
    },
    "MergeRequestChanges": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "target_branch": {
          "type": "string"
        },
        "source_branch": {
          "type": "string"
        },
        "upvotes": {
          "type": "string"
        },
        "downvotes": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "assignee": {
          "$ref": "#/definitions/UserBasic"
        },
        "source_project_id": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        },
        "labels": {
          "type": "string"
        },
        "work_in_progress": {
          "type": "string"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "merge_when_build_succeeds": {
          "type": "string"
        },
        "merge_status": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "merge_commit_sha": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        },
        "user_notes_count": {
          "type": "string"
        },
        "should_remove_source_branch": {
          "type": "string"
        },
        "force_remove_source_branch": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "changes": {
          "$ref": "#/definitions/RepoDiff"
        }
      },
      "description": "Show the merge request changes"
    },
    "MRNote": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        }
      },
      "description": "List issues that will be closed on merge"
    },
    "Note": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "system": {
          "type": "string"
        },
        "noteable_id": {
          "type": "string"
        },
        "noteable_type": {
          "type": "string"
        },
        "upvote?": {
          "type": "string"
        },
        "downvote?": {
          "type": "string"
        }
      },
      "description": "Delete a +noteable+ note"
    },
    "Pipeline": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "before_sha": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "yaml_errors": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "committed_at": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "coverage": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.11."
    },
    "ProjectHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "push_events": {
          "type": "string"
        },
        "tag_push_events": {
          "type": "string"
        },
        "enable_ssl_verification": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "issues_events": {
          "type": "string"
        },
        "merge_requests_events": {
          "type": "string"
        },
        "note_events": {
          "type": "string"
        },
        "build_events": {
          "type": "string"
        },
        "pipeline_events": {
          "type": "string"
        },
        "wiki_page_events": {
          "type": "string"
        }
      },
      "description": "Deletes project hook"
    },
    "ProjectWithAccess": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "tag_list": {
          "type": "string"
        },
        "public": {
          "type": "string"
        },
        "archived": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "ssh_url_to_repo": {
          "type": "string"
        },
        "http_url_to_repo": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/UserBasic"
        },
        "name": {
          "type": "string"
        },
        "name_with_namespace": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "path_with_namespace": {
          "type": "string"
        },
        "container_registry_enabled": {
          "type": "string"
        },
        "issues_enabled": {
          "type": "string"
        },
        "merge_requests_enabled": {
          "type": "string"
        },
        "wiki_enabled": {
          "type": "string"
        },
        "builds_enabled": {
          "type": "string"
        },
        "snippets_enabled": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "last_activity_at": {
          "type": "string"
        },
        "shared_runners_enabled": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "creator_id": {
          "type": "string"
        },
        "namespace": {
          "$ref": "#/definitions/Namespace"
        },
        "forked_from_project": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "avatar_url": {
          "type": "string"
        },
        "star_count": {
          "type": "string"
        },
        "forks_count": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "string"
        },
        "runners_token": {
          "type": "string"
        },
        "public_builds": {
          "type": "string"
        },
        "shared_with_groups": {
          "type": "string"
        },
        "only_allow_merge_if_build_succeeds": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "only_allow_merge_if_all_discussions_are_resolved": {
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/ProjectStatistics"
        },
        "permissions": {
          "type": "string"
        }
      },
      "description": "Get a single project"
    },
    "Event": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "action_name": {
          "type": "string"
        },
        "target_id": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "author_id": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "target_title": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/Note"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "author_username": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.13."
    },
    "ProjectGroupLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        },
        "group_access": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        }
      },
      "description": "Share the project with a group"
    },
    "ProjectSnippet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "updated_at": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "description": "Update an existing project snippet"
    },
    "RepoTreeObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        }
      },
      "description": "Get a project repository tree"
    },
    "Compare": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/RepoCommit"
        },
        "commits": {
          "$ref": "#/definitions/RepoCommit"
        },
        "diffs": {
          "$ref": "#/definitions/RepoDiff"
        },
        "compare_timeout": {
          "type": "string"
        },
        "compare_same_ref": {
          "type": "string"
        }
      },
      "description": "Compare two branches, tags, or commits"
    },
    "Contributor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "commits": {
          "type": "string"
        },
        "additions": {
          "type": "string"
        },
        "deletions": {
          "type": "string"
        }
      },
      "description": "Get repository contributors"
    },
    "ProjectService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "active": {
          "type": "string"
        },
        "push_events": {
          "type": "string"
        },
        "issues_events": {
          "type": "string"
        },
        "merge_requests_events": {
          "type": "string"
        },
        "tag_push_events": {
          "type": "string"
        },
        "note_events": {
          "type": "string"
        },
        "build_events": {
          "type": "string"
        },
        "pipeline_events": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        }
      },
      "description": "Get the service settings for project"
    },
    "RepoTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      },
      "description": "Create a new repository tag"
    },
    "Release": {
      "type": "object",
      "properties": {
        "tag_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "description": "Update a tag's release note"
    },
    "Todo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "action_name": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "target_url": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        }
      },
      "description": "Mark a todo as done"
    },
    "TriggerRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "variables": {
          "type": "string"
        }
      },
      "description": "Trigger a GitLab project build"
    },
    "Trigger": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string"
        },
        "last_used": {
          "type": "string"
        }
      },
      "description": "Delete a trigger"
    },
    "Variable": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Delete an existing variable from a project"
    },
    "SSHKeyWithUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "can_push": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserPublic"
        }
      },
      "description": "Get single ssh key by id. Only available to admin users"
    },
    "UserPublic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "is_admin": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "website_url": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "last_sign_in_at": {
          "type": "string"
        },
        "confirmed_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "theme_id": {
          "type": "string"
        },
        "color_scheme_id": {
          "type": "string"
        },
        "projects_limit": {
          "type": "string"
        },
        "current_sign_in_at": {
          "type": "string"
        },
        "identities": {
          "$ref": "#/definitions/Identity"
        },
        "can_create_group": {
          "type": "string"
        },
        "can_create_project": {
          "type": "string"
        },
        "two_factor_enabled": {
          "type": "string"
        },
        "external": {
          "type": "string"
        }
      },
      "description": "Get the currently authenticated user"
    },
    "Identity": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "extern_uid": {
          "type": "string"
        }
      }
    },
    "GlobalNotificationSetting": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "events": {
          "type": "string"
        },
        "notification_email": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.12"
    },
    "RunnerDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "active": {
          "type": "string"
        },
        "is_shared": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tag_list": {
          "type": "string"
        },
        "run_untagged": {
          "type": "string"
        },
        "locked": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "architecture": {
          "type": "string"
        },
        "contacted_at": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "projects": {
          "$ref": "#/definitions/BasicProjectDetails"
        }
      },
      "description": "Update runner's details"
    },
    "PersonalSnippet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "updated_at": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "raw_url": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.15."
    },
    "Hook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "push_events": {
          "type": "string"
        },
        "tag_push_events": {
          "type": "string"
        },
        "enable_ssl_verification": {
          "type": "string"
        }
      },
      "description": "Delete a hook"
    },
    "Email": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "description": "Add new email address to the currently authenticated user"
    },
    "UserWithPrivateToken": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "is_admin": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "website_url": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "last_sign_in_at": {
          "type": "string"
        },
        "confirmed_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "theme_id": {
          "type": "string"
        },
        "color_scheme_id": {
          "type": "string"
        },
        "projects_limit": {
          "type": "string"
        },
        "current_sign_in_at": {
          "type": "string"
        },
        "identities": {
          "$ref": "#/definitions/Identity"
        },
        "can_create_group": {
          "type": "string"
        },
        "can_create_project": {
          "type": "string"
        },
        "two_factor_enabled": {
          "type": "string"
        },
        "external": {
          "type": "string"
        },
        "private_token": {
          "type": "string"
        }
      },
      "description": "Login to get token"
    },
    "ApplicationSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "default_projects_limit": {
          "type": "string"
        },
        "signup_enabled": {
          "type": "string"
        },
        "signin_enabled": {
          "type": "string"
        },
        "gravatar_enabled": {
          "type": "string"
        },
        "sign_in_text": {
          "type": "string"
        },
        "after_sign_up_text": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "home_page_url": {
          "type": "string"
        },
        "default_branch_protection": {
          "type": "string"
        },
        "restricted_visibility_levels": {
          "type": "string"
        },
        "max_attachment_size": {
          "type": "string"
        },
        "session_expire_delay": {
          "type": "string"
        },
        "default_project_visibility": {
          "type": "string"
        },
        "default_snippet_visibility": {
          "type": "string"
        },
        "default_group_visibility": {
          "type": "string"
        },
        "domain_whitelist": {
          "type": "string"
        },
        "domain_blacklist_enabled": {
          "type": "string"
        },
        "domain_blacklist": {
          "type": "string"
        },
        "user_oauth_applications": {
          "type": "string"
        },
        "after_sign_out_path": {
          "type": "string"
        },
        "container_registry_token_expire_delay": {
          "type": "string"
        },
        "repository_storage": {
          "type": "string"
        },
        "repository_storages": {
          "type": "string"
        },
        "koding_enabled": {
          "type": "string"
        },
        "koding_url": {
          "type": "string"
        },
        "plantuml_enabled": {
          "type": "string"
        },
        "plantuml_url": {
          "type": "string"
        }
      },
      "description": "Modify application settings"
    },
    "RepoLicense": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "popular": {
          "type": "string"
        },
        "html_url": {
          "type": "string"
        },
        "source_url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "conditions": {
          "type": "string"
        },
        "permissions": {
          "type": "string"
        },
        "limitations": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.7."
    },
    "TemplatesList": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0."
    },
    "Template": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0."
    }
  }
}